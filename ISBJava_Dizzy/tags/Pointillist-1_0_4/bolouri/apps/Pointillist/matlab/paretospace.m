%-------------------------------------------------------------------------------
% Copyright (C) 2005 by Institute for Systems Biology,
% Seattle, Washington, USA.  All rights reserved.
% 
% This source code is distributed under the GNU Lesser 
% General Public License, the text of which is available at:
%   http://www.gnu.org/copyleft/lesser.html
%
%-------------------------------------------------------------------------------
% Module:    paretospace.m
%
% Author:    Daehee Hwang 
%            Institute for Systems Biology
%
% Function:  perform a multi-objective optimization on the Pareto space
%-------------------------------------------------------------------------------

function y=paretospace(x,intv)
[n,k]=size(x);
for i=1:k
    tn=find(x(:,i)==0);
    if ~isempty(tn)
        x(find(x(:,i)==0),i)=linspace(1.e-10,1.e-323,length(tn))';
    end
    if ~isempty(find(x(:,i)<1.e-323))
        x(find(x(:,i)<1.e-323),i)=1.e-323;
    end
    if ~isempty(find(x(:,i)>0.99999999999999994))
        x(find(x(:,i)>0.99999999999999994),i)=0.99999999999999994;
    end
end

%integration statistic
opt=1;

%parameters for param
param.meth=1;
m=5;% m replicates of Random numbers being generated by Monte Carlo using Rejection method.
rand('state',0);
param.H0y=mcmc(k,opt,m);
param.mvp=[];

%defining the alpha interval for Paretospace
if nargin<2
    intv=0.005;
end
alphaint=[1.e-4:intv:1-1.e-4]

%parameters for esa
tmw=1/k*ones(1,k-1); 
minth=zeros(1,k-1);maxth=ones(1,k-1);

%initialization of the variable containing the product of power and confidence
nn=length(alphaint)
mobj=zeros(nn,3);
for i=1:nn
    i
    param.alpha=alphaint(i);
    [w,Elowst]=esa(tmw,minth,maxth,x,opt,param);
    [f,g]=genwfunf([w 1-sum(w)],opt,x,[],param,0);
    mobj(i,1)=abs(f)/n;%estimated power
    mobj(i,2)=(1-alphaint(i)); %confidence
    mobj(i,3)= prod(mobj(i,1:2));
end
figure;
plot3(log(mobj(:,1)),log(mobj(:,2)),mobj(:,3),'g.');grid on;
xlabel('Log(Estimated Power)');ylabel('Log(Confidence)');
zlabel('Z = Estimated Power * Confidence');

[ii,jj]=max(mobj(:,3));
alpha=alphaint(jj);
param.alpha=alpha;
[w,Elowst]=esa(tmw,minth,maxth,x,opt,param);
[f,g]=genwfunf([w 1-sum(w)],opt,x,[],param,1);
y.ts=g.ts;
y.alpha=alpha;
y.w=[w 1-sum(w)];   
y.mobj=mobj;