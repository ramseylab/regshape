<?xml version="1.0"?>
<?xml-stylesheet type="text/xml" href="../../../config/documentation-stylesheet.xml"?>
<!DOCTYPE isbdocument [
  <!ENTITY % AppConfig SYSTEM "../config/AppConfig.dtd">
  %AppConfig;

<!ENTITY ccmdlExtension ".dizzy">
<!ENTITY cmdlExtension ".isbchem">
<!ENTITY sbmlExtension ".xml">
<!ENTITY sbmlURL "http://www.sbw-sbml.org">
<!ENTITY appNameCommandLine "dizzycmd">
   ]>

<!-- ========== PREAMBLE ========== -->

<isb:document xmlns:isb="http://www.systemsbiology.org/xmlns"
              xmlns:html="http://www.w3.org/TR/xhtml1"
              xmlns="http://www.w3.org/TR/xhtml1">

<isb:doctitle>&appName; User Manual</isb:doctitle>
<isb:docowner>&appMaintainerFullName;, &appMaintainerAffiliation;</isb:docowner>
<isb:docownerurl>&appMaintainerURL;</isb:docownerurl>
<isb:docdate>$Date$</isb:docdate>
<isb:docowneremail>&appMaintainerEmailSafe;</isb:docowneremail>
<isb:docauthor>&appOriginalAuthorFullName; (<code>&mainGroupEmailSafe;</code>)</isb:docauthor>

<isb:doccontents />

<!-- ========== INTRODUCTION ========== -->

<isb:docsection name="Introduction" label="introduction">
<p />
&appName; is a chemical kinetics simulation software 
package implemented in Java.  It provides a model definition environment and 
an implementation of the <a href="#gillespie">Gillespie stochastic algorithm</a>. 
This software can be used to define a system of interacting chemical species,
and the reactions through which they interact.  The software can then be used 
to simulate the reaction kinetics of the system of interacting species.
The software consists of the following elements:
<ol>
<li>a set of Java packages or &quot;libraries&quot; that constitute a Java 
application programming interface (or &quot;API&quot;) for this software system
There is <a href="&webBaseURL;/javadoc">javadoc</a> documentation available
for the API for this software package.</li>
<li>a scripting engine that can be invoked from the command-line, to define
a model and run simulations on the model, and to export a model to a different
model definition language</li>
<li>an implementation of the 
<a href="#gillespie">Gillespie stochastic algorithm</a> 
for simulating chemical reaction kinetics</li>
<li>a graphical user interface ("GUI") application that can be used to run 
simulations and export a model to a different model definition language</li>
<li>a Systems Biology Workbench bridge that allows the simulator to be
invoked through the Systems Biology Workbench, using a model defined in
the Systems Biology Markup Language</li>
</ol>
Models are defined in text files that you must edit, or generate using
an external tool (e.g., JDesigner).  This system can understand three types of 
model definition languages, each of which has an associated filename 
suffix ("extension").  The GUI program (referred to above) uses the
filename extension to guess what model definition language the file contains.
<ol>
<li><a href="&sbmlURL;">Systems Biology Markup Language</a> ("SBML")
<p />
The SBML standard is documented outside the scope of this document, at the
aforementioned (&sbmlURL;) web site.  The &appName; system
is able to read and write a subset of the SBML Level 1 specification.
You can generate a model in SBML format by using the JDesigner software tool.
<p />
The file extension of the SBML language is: &quot;.xml&quot;
<p />
</li>
<li><a href="#cmdl">Chemical Model Definition Language (CMDL)</a>
<p />
The Chemical Model Definition Language (CMDL) 
is the language understood "natively" by the
&appName; scripting engine; the engine translates models from other languages 
into its native language, before processing them.  
<p />
The file extension of the CMDL command language is: &quot;<code>&cmdlExtension;</code>&quot;
<p />
</li>
<li><a href="#ccmdl">Condensed Chemical Model Definition Language (CCMDL)</a>
<p />
The condensed command language is a simplified, condensed notation
that is translated into the aforementioned CMDL command language
by the scripting engine.  The CMDL command language is more powerful
and flexible, but also a bit more tedious to type in manually.
Note that the &appName; system can export into file types (1) and (2) 
mentioned above, but not into the CCMDL scripting language.
<p />
The file extension of the CCMDL scripting language is &quot;<code>&ccmdlExtension;</code>&quot;
<p />
</li>
</ol>
For all three of the above languages, 
<a href="#samplefiles">example model definition files</a> are provided with
the &appName; installation.
<p />
<p>
This document is the user manual for the &appName; program.
This manual applies to the following release version of the program:
<blockquote>
<pre>
release version:   &appVersion;
release date:      &appDate;
</pre>
</blockquote>
The release notes for this version of the program can be found
at the following URL:
<blockquote>
<a href="ReleaseNotes.html">&appHomePage;/docs/ReleaseNotes.html</a>
</blockquote>
The home page for this program is:
<blockquote>
<a href="&appHomePage;">&appHomePage;</a>
</blockquote>
The version history for this program can be found at the following URL:
<blockquote>
<a href="VersionHistory.html">&appHomePage;/docs/VersionHistory.html</a>
</blockquote>
If you are reading this document through a print-out, you can find
the online version of this document (which may be a more recent version)
at the following URL:
<blockquote>
<a href="&appHomePage;/docs/UserManual.html">&appHomePage;/docs/UserManual.html</a>
</blockquote>
A PDF version of this manual is also available on-line at:
<blockquote>
<pre>
<a href="&appHomePage;/docs/UserManual.pdf">&appHomePage;/docs/UserManual.pdf</a>
</pre>
</blockquote>
The above hyperlinks for the User Manual are for the most recent
version of the &appName; system.
</p>

</isb:docsection>

<isb:docsection name="Getting Started" label="gettingstarted">

<p>
This section describes how to get started with using the &appName;
system.
</p>

<!-- ========== SYSTEM REQUIREMENTS ========== -->

<isb:docsubsection name="System Requirements" label="systemrequirements">
<p>
The &appName; system is implemented in the Java programming language.
This means that an installation of the Java Runtime Environment
(JRE) is required in order to be able to use the &appName; system.

A version of the &appName; system installer program 
(&quot;<code>ins&appName;.bin</code>&quot; on Unix/Linux, 
or &quot;<code>ins&appName;.exe</code>&quot; on Windows)
is available which has the Sun JRE version 1.4.1 pre-bundled with it.
This is the recommended approach for users who are not knowledgeable
in the use of the Java programming language and runtime environment.
</p>
<p>
You may also download the &quot;thin&quot; version of the installer 
that does not  have the JRE pre-bundled.  In order to use 
the &quot;thin&quot; installation of &appName;, you must already have
a JRE installed on your computer.  The JRE must be at least version 
1.4 or newer, because the software uses Java 1.4 language features and 
extensions.  This software will not function correctly with a 1.3.X 
version of the JRE; if you attempt to run it under a 1.3.X version
of the JRE, you will see an <code>UnsupportedClassVersionException</code>.
</p>
<p>
The specific hardware requirements for using the &appName; system
will vary depending on the complexity of the models being
studied, and on the type of JRE and host operating system.
A good rule of thumb is that at least 512 MB of RAM is recommended.
If you are using your own JRE and it is not a Sun JRE, you will need
to ensure that the appropriate command-line parameters are passed
to the JRE to ensure that the built-in heap size limit is set to
at least 512 MB.  If you are using the Sun JRE, or the JRE that
is pre-bundled with the &appName; installer, this issue does not 
apply to you.
</p>
<p>
This software has been tested on Windows XP and Red Hat Linux 8.0.
It should function properly on most Windows and Linux distributions.
For other operating systems, you may download the &quot;Other Java-Enabled
Platforms&quot; version of the installer.  A Mac OSX version of the
installer is under development and will be released soon.
</p>
</isb:docsubsection>

<isb:docsubsection name="Tutorial" label="tutorial">

<p>
&appName; is launched by executing the &quot;&appName;&quot; executable
that was installed as a symbolic link by the installation program.  The
default location of this symbolic link depends on your operating system.
If you are installing on a Windows computer, the symbolic link is created
in a new Program Group &quot;&appName;&quot;, which will show up in the
&quot;Start&quot; menu.  If you are installing on a Linux computer, the
symbolic link is created in your home directory, by default.  Note that
the installation program permits you to override the default location for
the symbolic link to be created, so the symbolic link may not be in the 
default location on your computer, if you selected a different location
in the installation process.  By double-clicking on the &quot;&appName;&quot;
symbolic link, the &appName; program should start up.  You should see an
application window appear that looks like the following picture:
</p>
<p>
<img src="../images/screenshot2.png" alt="&appName; screenshot 2" />
</p>
<p>
To load a model definition file into &appName;, select the &quot;Open...&quot;
item from the &quot;File&quot; menu.  This will open a dialog box, as shown
here:
</p>
<p>
<img src="../images/screenshot3.png" alt="&appName; screenshot 3" />
</p>
<p>
In the &quot;Please select a file to open&quot; dialog box, navigate to the
directory in which you installed &appName;.  Then navigate into the
&quot;samples&quot; subdirectory.  The dialog box should look like this:
</p>
<p>
<img src="../images/screenshot4.png" alt="&appName; screenshot 4" />
</p>
<p>
For starters, try selecting the &quot;<code>GAL&ccmdlExtension;</code>&quot; 
file, by double-clicking on that file name in the dialog box. 
The &appName; window should now look like this:
<p>
<img src="../images/screenshot5.png" alt="&appName; screenshot 5" />
</p>
Note that the <a href="#models">model name</a> 
&quot;myModel&quot; has appeared in the 
&quot;models:&quot; list box, and the 
<a href="#speciespopulations">species populations collection</a>
name &quot;sp&quot; has appeared in the &quot;species populations sets:&quot; 
list box.  
</p>
<p>
Now, select the model &quot;<code>myModel</code>&quot;, and the species
populations collection &quot;<code>sp</code>&quot; by single-clicking
on each of them in their respective list boxes.  Now double-click on 
the model &quot;<code>myModel</code>&quot;, to list the contents of 
the model.  The &appName; window should now look like this:
</p>
<p> 
<img src="../images/screenshot6.png" alt="&appName; screenshot 6" />
</p>
<p>
You can use the scroll bar in the &quot;runtime output log&quot; text
box to view all of the text describing the &quot;<code>GAL&ccmdlExtension;</code>&quot;
model.  
</p>
<p>
To try simulating the kinetics of this model, select the
&quot;Simulate...&quot; menu item from the &quot;Tools&quot; menu.
This should create a &quot;&appName;: simulator&quot; 
dialog box, that looks like this:
</p>
<p>
<img src="../images/screenshot7.png" alt="&appName; screenshot 7" />
</p>
<p>
First, you will need to specify a &quot;stop time&quot; for the simulation.
This is a floating-point number that you must type into the text box next
to the &quot;stop time:&quot; label in the &quot;&appName;: simulator&quot;
dialog box.  Second, you will need to select one or more species whose
populations are to be returned as time-series data resultant from the simulation.
For the purposes of demonstration, select the &quot;<code>G3D_G80D</code>&quot;
species in the list box under the &quot;view species&quot; label in the dialog
box.  
<blockquote>
<b>TIP:</b> You can select two species that are not adjacent to one another
in the list box of species, by holding down the &quot;control&quot; key, and
(while holding down the key) clicking on a species name with the mouse.
</blockquote>
Finally, you will need to specify the &quot;output type&quot; for the
simulation.  For demonstration purposes, click on the circular button next
to the &quot;plot&quot; label on the dialog box.  Go ahead and change the
number of samples to 30 samples, by editing the &quot;100&quot; appearing
in the text box next to &quot;num samples&quot;.  This controls the number of
time points for which the result data will be graphed.  At this point, the dialog
box should look like this:
</p>
<p>
<img src="../images/screenshot8.png" alt="&appName; screenshot 8" />
</p>
<p>
Now, let&apos;s run the simulation, by single-clicking on the &quot;start&quot;
button in the &quot;&appName;: simulator&quot; dialog box.  After a moment,
you should see a plot window appear that resembles the following image:
</p>
<p>
<img src="../images/screenshot9.png" alt="&appName; screenshot 9" />
</p>
<p>
For longer-running simulations, you can use the &quot;cancel&quot;,
&quot;stop&quot;, and &quot;resume&quot; buttons to control a running
simulation.  It is possible to pause and resume a simulation using the
&quot;stop&quot; and &quot;resume&quot; buttons.  You may terminate a
running simulation at any time using the &quot;cancel&quot; button.
The &quot;start&quot; button is only used to initiate a simulation.
Only one simulation may be running at a time, in the &appName; application.
</p>
<p>
A special note applies to the case of importing a model definition file in
SBML format, using the GUI application.  In this case, the GUI application
will ask you to specify how species symbols appearing in reaction rate
expressions are to be interpreted.  The choices given are "concentration"
and "molecules".  It is recommended that you try using "concentration" first.
If the GUI application complains that the initial population of a given
chemical species is too large for it to handle, try reloading the
model with the "molecules" choice instead.  This will likely solve 
the problem.
</p>
<p>
Now that you have become acquainted with the simulation driver screen, 
the next step is to become acquainted with the 
<a href="#ccmdl">CCMDL model definition language</a>, which permits 
rapid development of new models. 
To begin, let&apos;s define a simple model of a chemical system.
This system will consist of the enzyme-substrate reaction:
<blockquote>
<pre>
&nbsp;&nbsp;&nbsp;E
S ---&gt; P
</pre>
</blockquote>
where the &quot;<code>E</code>&quot; is the enzyme, and 
&quot;<code>S</code>&quot; is the substrate, and &quot;<code>P</code>&quot;
is the product.  It is well known that the above symbols are
shorthand for the following three elementary chemical reactions:
<blockquote>
<pre>
E + S ---&gt; ES
ES    ---&gt; E + S
ES    ---&gt; E + P
</pre>
</blockquote>
where the &quot;<code>ES</code>&quot; species is the enzyme-substrate
complex. We will now investigate the stochastic kinetics of this
very simple model using the &appName; simulator.
Please use your text editor (e.g., Notepad on Windows) to create
a new file, &quot;Model&ccmdlExtension;&quot;.  This will be our
&quot;model definition file&quot;, in which we will define the species
and chemical reactions that make up the model, as well as the kinetic
parameters that will be used to simulate the reaction kinetics.  The 
&quot;&ccmdlExtension;&quot; file extension is important, so please
type the file name exactly as shown.  This helps the &appName; program
to recognize the file as an official &quot;&appName; model definition file&quot;,
and to select the proper interpreter to load the file.
The file should start out completely empty.  Let&apos;s begin by defining
the first of the three elementary reactions that make up the above model.
We will be defining this model in the 
<a href="#ccmdl">&quot;condensed&quot; language for entering a model definition file</a>,
which is syntactically very close to the Jarnac language. At the top of
the file, please enter the following line, exactly as shown here:
<blockquote>
<pre>
r1, E + S -&gt; ES, 1.0;
</pre>
</blockquote>
This line is an example of a <em>statement</em> called a <em>reaction definition</em>.  
You will notice that the line ends with a semicolon.  In the &appName; language,
semicolons divide the model definition file into a sequence of statements.
Each statement ends with a semicolon.  A statement can in principle extend
over one line, as shown here:
<blockquote>
<pre>
r1, E + S -&gt; ES,
                    1.0;
</pre>
</blockquote>
This definition is logically equivalent to the one-line reaction definition
above it.  
</p>
<p>
The commas in the statement divide the statement into
<em>elements</em>.  We will explain each element in turn.  In a reaction
definition statement, the first element is optional, and defines the
&quot;name&quot; of the reaction.  This is just a symbolic name for the
reaction, that does not affect the chemical kinetics of the model.  There
are <a href="#symbols">rules governing allowed symbol names</a> that apply
to reaction names.  The reaction name specified above was &quot;r1&quot;,
which is not very descriptive.  Perhaps a more descriptive name would have
been &quot;enzyme_substrate_combine&quot;, as shown here:
<blockquote>
<pre>
enzyme_substrate_combine, E + S -&gt; ES, 1.0;
</pre>
</blockquote>
Note the use of the underscore character (&quot;<code>_</code>&quot;), which
is necessary because spaces are not allowed in symbol names such as reaction names.
The second element of the reaction definition statement defines the
list of reactant species and products species for the chemical reaction.
In this case, the reactants are species &quot;<code>E</code>&quot; (the enzyme)
and species &quot;<code>S</code>&quot; (the substrate).  The special symbol
&quot;<code>-&gt;</code>&quot; separates the list of reactants and products.
The sole product species is &quot;<code>ES</code>&quot;, the enzyme-substrate
complex.  The &quot;<code>+</code>&quot; operator is used to separate species 
in either the reactant or product side of the reaction.  In passing, we note
that this is a <em>one-way</em> reaction, meaning that it defines a process
that is not (by itself) reversible.  To define a reversible reaction in &appName;,
you would need to follow the above reaction definition statement with a second
reaction definition statement, in which the reactants and products are reversed,
for example:
<blockquote>
<pre>
enzyme_substrate_separate, ES -&gt; E + S, 0.1;
</pre>
</blockquote>
The third element is a reaction rate.  This can be specified as a bare
number (as shown above), or as a double-quoted string.  When you specify the
reaction rate as a bare number, you are instructing the &appName; simulator
to compute the reaction rate using its built-in combinatoric method.  This
means that the reaction probability density (usually designated with the
symbol &quot;<code>a</code>&quot;) per unit time is computed as
the product of the number of district combinations of reactant species,
times the reaction rate parameter you specified in the reaction definition.
Let us illustrate this with an example.  For the reaction
<blockquote>
<pre>
r1, A + B -&gt; C + D, 2.0;
</pre>
</blockquote>
If species <code>A</code> has a population of 10, and species <code>B</code>
has a population of 10, the reaction probability density per unit time will
be evaluated as the number of distinct combinations of reactant molecules 
(in this case, that is 100) times the reaction rate parameter, 2.0.  The
resulting reaction probability density per unit time will be 200.  This
probability density can be used to compute the probability <code>P</code> that a given
chemical reaction will occur during an infinitesimal time interval <code>dt</code>:
<blockquote>
<pre>
P = a dt
</pre>
</blockquote>
The probability that a given chemical reaction (whose probability density per
unit time is designated with the symbol &quot;<code>a</code>&quot;) will
occur during the infitesimal time interval <code>dt</code> is just the product
of the infinitesimal time interval, and the reaction probability density per
unit time.  
</p>
<p>
Getting back to our model-building, we see that the forward reaction for
the enzyme and substrate combining, was given a reaction rate parameter of
1.0, and the reverse of that reaction (enzyme-substrate complex separating)
was given the rate of 0.1.  
</p>
<p>
Note that in defining a chemical reaction, the element specifying the
reaction name is not required.  If you do not specify a reaction name,
a unique reaction name is automatically assigned to the reaction by &appName;.
The syntax for a reaction thus defined is:
<blockquote>
<pre>
A + B -&gt; C + D, 2.0;
</pre>
</blockquote>
It is recommended that you specify your own reaction names, because the names 
automatically assigned by &appName; will be verbose and hard to understand.
</p>
<p>
Now, let&apos;s define the third reaction, which takes the enzyme-substrate
complex to the enzyme plus product,
<blockquote>
<pre>
make_product, ES -&gt; E + P, 0.01;
</pre>
</blockquote>
Putting the three reaction definition statements together, your model
definition file should look like this:
<blockquote>
<pre>
enzyme_substrate_combine, E + S -&gt; ES, 1.0;
enzyme_substrate_separate, ES -&gt; E + S, 0.1;
make_product, ES -&gt; E + P, 0.01;
</pre>
</blockquote>
The &appName; system ignores whitespace that is not in a quoted string,
so you may reformat your model definition file using spaces, so that
it is more tabular:
<blockquote>
<pre>
enzyme_substrate_combine,    E + S -&gt; ES,      1.0;
enzyme_substrate_separate,   ES    -&gt; E + S,   0.1;
make_product,                ES    -&gt; E + P,   0.01;
</pre>
</blockquote>
The above statements define the reactions and (implicitly) the chemical
species involved in the reactions.  But they do not define the initial
conditions for a simulation.  In order to simulate this model, we will
need to supply initial values for the number of molecules of each species
in the model.  To do this, add the following statements to your model,
<em>after the reaction definition statements</em>:
<blockquote>
<pre>
E = 100;
S = 100;
P = 0;
ES = 0;
</pre>
</blockquote>
Note that it is very important that these statements appear after the
reaction definition statements.  Otherwise, the &appName; interpreter will
not understand that the symbols refer to species, and will assume that 
they are <em>macro definitions</em> (a useful and powerful feature defined
in the reference section of the user manual below).  Note that you must
specify the initial population of each and every species appearing in the
model.  They are not implicitly initialized to zero.
</p>
<p>
The final model definition file should look like this:
<blockquote>
<table border="1">
<tr><td>
<pre>
enzyme_substrate_combine,    E + S -&gt; ES,      1.0;
enzyme_substrate_separate,   ES    -&gt; E + S,   0.1;
make_product,                ES    -&gt; E + P,   0.01;

E = 100;
S = 100;
P = 0;
ES = 0;
</pre>
</td></tr>
</table>
</blockquote>
</p>
<p>
Remember, whitespace is ignored by the &appName; interpreter, so your spacing
does not need to look exactly like the example shown above.
Now, let&apos;s save this model definition file in your text editor.  Next,
let&apos;s clear the &appName; of any model definitions by clicking on the
&quot;clear runtime variables&quot; button on the main window.  This will
delete any model definitions that have been loaded into &appName; (but don&apos;t
worry, the model definition files will not be deleted!).  Now, let&apos;s
open the model definition file in &appName;, as shown above.  Finally, let&apos;s
select the &quot;Simulate...&quot; menu item from the &quot;Tools&quot; menu,
and run a simulation.  Select a stop time of 400.0, and specify an output type
of &quot;plot&quot;, and a &quot;num samples&quot; of 40.  
Select &quot;<code>P</code>&quot; as the species to view.  Your simulation
controller dialog box should look like this:
</p>
<p>
<img src="../images/screenshot10.png" alt="screenshot 10" />
</p>
<p>
Now, run the simulation.  You should see the familiar Michaelis-Menten type
reaction kinetics appear in a plot window:
</p>
<p>
<img src="../images/screenshot11.png" alt="screenshot 11" />
</p>
<p>
Note that the curve is not a perfect Michaelis-Menten kinetics.  This is
because we are running a <b>stochastic simulation</b>.  The Gillespie
algorithm introduces the noisy effects of low copy numbers of chemical
species in the model.  If we were to drastically increase the number of species
(say, by a factor or 1000) in the model, the curve would become less noisy:
</p>
<p>
<img src="../images/screenshot12.png" alt="screenshot 12" />
</p>
<p>
Note that the larger the initial copy number of the species in the model,
the more computational time will be requird to simulate the model for
a given (fixed) choice of &quot;stop time&quot;.  This means that in general,
when running stochastic simulations you should start with small initial 
copy numbers for the species in your model, and determine the computational
run-time, before attempting simulations with large initial species populations.
</p>

</isb:docsubsection>

<isb:docsubsection name="Sample Model Definition Files" label="samplefiles">
<p>
When you install the &appName; application, a subdirectory &quot;samples&quot;
is created in the directory where &appName; is installed.  
You will find examples of all three languages in the "samples"
subdirectory of the directory in which you install the &appName; software.
<blockquote>
<b>Note to Windows users:</b> please do not use Notepad to open the
sample model definition files in the &quot;samples&quot; subdirectory.
Please use a different editor, such as WordPad or Emacs, in order to 
ensure that the files appear properly formatted, in the editor.  <b>You
may wish to associate &quot;<code>&ccmdlExtension;</code>&quot; files 
with the WordPad program, so that you can double-click on a
&quot;<code>&ccmdlExtension;</code>&quot; file and have it open
(properly formatted) in WordPad.</b>
</blockquote>
In addition, there is a <a href="&webBaseURL;/models">repository of
biomolecular models</a> maintained by the &mainGroup;, that
will serve as a good source of sample model definition files.
</p>
</isb:docsubsection>


</isb:docsection>

<isb:docsection name="Preliminary Concepts" label="preliminaries">

<p>
This section describes preliminary concepts that are common
throughout the various model definition languages for the
&appName; system.
</p>

<!-- ========== NUMERIC PRECISION ========== -->

<isb:docsubsection name="Numeric Precision" label="numericprecision">
<p>
All floating-point numbers in the &appName; system are Java double-precision
numbers.  This means that they are floating-point numbers in a 64-bit 
representation adhering to the IEEE 754-1985 standard.  Java 
double-precision floating-point numbers provide approximately 15 
digits of precision.  All internal calculations are performed 
using double-precision floating-point arithmetic, unless otherwise noted.
</p>
<p>
It should be noted that the above limitation of the number of 
significant digits of a double-precision floating-point number in 
Java, means that reaction rates differing by more than 15 orders 
of magnitude will cause incorrect results from the stochastic simulator.
In practice, this limitation rarely presents a problem.
</p>
</isb:docsubsection>

<!-- ========== CASE SENSITIVITY ========== -->

<isb:docsubsection name="Case Sensitivity" label="casesensitive">
<p>
All symbols, keywords and expressions in the &appName; system are
case-sensitive.  This means that if you define a symbol such as
&quot;<code>x</code>&quot; (lower-case), you cannot later 
refer to it as
&quot;<code>X</code>&quot; (upper-case).  Similarly, mixed-case 
keywords that are built into the &appName; system,
such as the keyword <code>exportModelInstance</code>,
must be entered exactly as shown; case variants such as
<code>exportmodelinstance</code> would not be recognized as 
valid keywords.
</p>
</isb:docsubsection>

<!-- ========== SYMBOL NAMES ========== -->

<isb:docsubsection name="Symbol Names" label="symbols">
<p>
Symbol names are a core ingredient of the &appName; system.  
Most elements of the &appName; system (reactions, species, parameters,
compartments, etc.) are named elements whose names must be
valid symbol names.  A symbol name must conform to the following
rules:
<ol>
<li>A symbol name must be composed entirely of alphanumeric characters, 
and the underscore character.</li>
<li>A symbol name must not parsed as a numeric literal (i.e., it cannot
be a number, such as <code>1.0</code></li>
<li>the symbols <code>time</code> and <code>N</code> are reserved,
because they represent clock time and Avogadro&apos;s constant, respectively</li>
</ol>
Note that Rule #1 above implies that a symbol name cannot contain 
parentheses, square brackets, curly braces, or the arithmetic operators: 
<code>+</code>, <code>-</code>, <code>*</code>,
<code>/</code>, <code>%</code>, <code>^</code>, or the
relations <code>&gt;</code>, <code>&lt;</code>, and <code>=</code>.  
Further, it implies that a symbol name cannot contain the following 
reserved characters:
<code>!</code>, <code>@</code>, <code>#</code>, <code>$</code>,
<code>|</code>, <code>&amp;</code>, <code>;</code>, 
<code>=</code>, the comma &quot;<code>,</code>&quot;,
and the period &quot;<code>.</code>&quot;.
</p>
<p>
For the reader who is familiar with the C programming language, the
above can be summarized as:  a symbol name is legal if it would be 
a legal variable name in a C program.  
</p>
<p>
Some examples of valid symbol names are shown here:
<blockquote>
<pre>
Species_A
Galactose
DNA_plus_TFA
P1
</pre>
</blockquote>
The following shows some examples of <em>illegal</em> symbol names:
<blockquote>
<table>
<tr valign="top">
<td>
<b>ILLEGAL:</b>&nbsp;&nbsp;&nbsp;&nbsp;
</td>
<td>
<pre>
A + B
DNA plus TFA
C-D
1.0
1e+6
B!
</pre>
</td>
</tr>
</table>
</blockquote>
The underscore can be used as a convenient separator
when defining a symbol name with multiple words.
</p>
<p>
<a name="namespace" />
Symbol names are stored in a <b>namespace</b>.  There are two
types of namespaces, <b>global</b> and <b>local</b>.  Normally,
all symbol names reside in the <b>global namespace</b>.  This applies
to <a href="#species">species names</a>, <a href="#reactions">reaction
names</a>, <a href="#compartments">compartment names</a>, and
<a href="#parameters">parameter names</a>.  This means that you cannot
define a species <code>X</code> and a reaction <code>X</code>; their
names would collide in the global namespace.  
</p>
<p>
The <b>local namespace</b> applies only to a parameter that is defined
only for a specific reaction (or reactions).  Each reaction has
a local namespace for its reaction-specific parameters.  It <em>is</em>
permissible to define a parameter <code>X</code> in the global 
namespace, and to also define a parameter <code>X</code> with a 
different value, in the local namespace for one or more reactions.
In that case, the value associated with <code>X</code> for the
specific reaction supersedes the value associated with <code>X</code>
in the global namespace, for the purpose of evaluating the custom
reaction rate expression for the reaction.  This can be summarized by
saying that a parameter defined locally supersedes a parameter defined
globally, of the same name.  The local namespace concept applies only
to parameters.  Note that defining parameters within the local
namespace is not possible in the <a href="#ccmdl">Condensed Chemical
Model Definition Language</a>.
</p>

</isb:docsubsection>

<!-- ========== MATHEMATICAL EXPRESSIONS ========== -->

<isb:docsubsection name="Mathematical Expressions" label="expressions">
<p>
Various aspects of the &appName; system permit the textual
specification of mathematical expressions.  This is a useful
method of customizing reaction rate equations and other aspects
of a chemical system model.  A mathematical
expression may involve symbols, numeric literals, arithmetic 
operators, and built-in mathematical functions.  
</p>
<p>
<a href="#symbols">Symbols</a> are analogous 
to algebraic variables or symbols. Depending on the context,
a symbol may represent the population or concentration
of a chemical species, or it may represent a floating
point parameter defined for a model or a chemical reaction.
In the context of an expression, a symbol always has
an associated numeric value.  When a symbol appears in
a mathematical expression, its associated numeric value
is used in place of the symbol, for the purpose of evaluating
the expression.  
</p>
<p>
In the context of a mathematical expression, numeric literals 
are simply numbers, either floating point or integer.  Note that
within a mathematical expression, scientific notation 
(e.g., <code>1.2e-7</code> or <code>1.2e+7</code>) is not
permitted in the specification of bare numbers.  However,
this does not pose a problem because constructions such
as <code>1.2*10^7</code> and <code>1.2*10^(-7)</code>
are permitted.
</p>
<p>
In the &appName; system, mathematical 
expressions are described using a syntax similar to the C 
programming language.  The basic operations permitted are:
<blockquote>
<dl>
<dt><b>addition</b></dt>
<dd>adding two symbols, numbers, or sub-expressions, such
as <code>A+B</code>, or <code>A+1.7</code>, or <code>2+2</code></dd>

<dt><b>subtraction</b></dt>
<dd>computes the difference of two symbols, numbers, or sub-expressions, such
as <code>A-B</code>, or <code>A-1.7</code>, or <code>2-2</code></dd>

<dt><b>multiplication</b></dt>
<dd>multiplying two symbols, numbers, or sub-expressions, such
as <code>A*B</code>, or <code>A*1.7</code>, or <code>2*2</code></dd>

<dt><b>division</b></dt>
<dd>computes the quotient of two symbols, numbers, or sub-expressions, such
as <code>A/B</code>, or <code>A/1.7</code>, or <code>2/2</code>.
The first operand is the dividend, and the second operator is the divisor.</dd>

<dt><b>modulo division</b></dt>
<dd>computes the remainder of the quotient of two symbols, numbers, or sub-expressions, such
as <code>A%B</code>, or <code>A%1.7</code>, or <code>2%2</code>.
The first operand is the dividend, and the second operator is the divisor.</dd>

<dt><b>exponentiation</b></dt>
<dd>computes the exponent of two symbols, numbers, or sub-expressions, such
as <code>A^B</code>, or <code>A^1.7</code>, or <code>2^2</code>.
The first operand is the value being exponentiated.
The second operand is the exponent.</dd>

<dt><b>parentheses</b></dt>
<dd>represents a sub-expression whose value is to be
computed, such as the sub-expression <code>(B+C)</code>
appearing in the expression <code>A+(B+C)</code>.</dd>

<dt><b>negation</b></dt>
<dd>computes the negative of a symbol, number, or sub-expression, such as
<code>-A</code>, or <code>-1.0</code>, or <code>-(A+B)</code>.</dd>
</dl>
</blockquote>
In addition to the above operations, there are a number
of built-in mathematical functions that may be used in
mathematical expressions.  Unless otherwise stated, the
built-in functions described below are implemented by calling
the corresponding function in the <code>java.lang.Math</code>
class in the Java Runtime Environment.  The built-in mathematical
functions available for use in mathematical expressions are:
<blockquote>
<dl>
<dt><b>exp</b></dt>
<dd>Computes the value of the base of the natural logarithm, 
<code>e</code>, raised to the power of the (floating-point) 
argument.</dd>

<dt><b>log</b></dt>
<dd>Computes the natual logarithm of the argument, which
must be in the range <code>(0, infinity)</code>.</dd>

<dt><b>sin</b></dt>
<dd>Computes the trigonometric sine of the argument.
The argument is an angle, which must be specified in radians.
Example:  <code>sin(A)</code>, <code>sin(3.14159)</code>.
</dd>

<dt><b>cos</b></dt>
<dd>Computes the trigonometric cosine of the argument.
The argument is an angle, which must be specified in radians.
Example:  <code>cos(A)</code>, <code>cos(3.14159)</code>.
</dd>

<dt><b>tan</b></dt>
<dd>Computes the trigonometric tangent of the argument.
The argument is an angle, which must be specified in radians.
Example:  <code>tan(A)</code>, <code>tan(3.14159)</code>.
</dd>

<dt><b>asin</b></dt>
<dd>Computes the trigonometric inverse sine of the argument.
The argument is a dimensionless ratio, that must be within the
range [-1,1].  The value returned is an angle, in radians.
Example:  <code>asin(A)</code>, <code>asin(0.5)</code>.
</dd>

<dt><b>acos</b></dt>
<dd>Computes the trigonometric inverse cosine of the argument.
The argument is a dimensionless ratio, that must be within the
range [-1,1].  The value returned is an angle, in radians.
Example:  <code>acos(A)</code>, <code>acos(0.5)</code>.
</dd>

<dt><b>atan</b></dt>
<dd>Computes the trigonometric inverse tangent of the argument.
The argument is a dimensionless ratio.  The value returned is 
an angle, in radians.
Example:  <code>atan(A)</code>, <code>acos(0.5)</code>.
</dd>

<dt><b>abs</b></dt>
<dd>Computes the absolute value of the argument.
</dd>

<dt><b>floor</b></dt>
<dd>Computes greatest integer value that is less than
or equal to the floating-point argument.
Example:  <code>floor(A)</code>, <code>floor(1.7)</code></dd>

<dt><b>ceil</b></dt>
<dd>Computes the smallest integer value that is greater than
or equal to the floating-point argument.
Example:  <code>ceil(A)</code>, <code>ceil(1.7)</code></dd>

<dt><b>sqrt</b></dt>
<dd>Computes the value of the square root of the argument.
The argument must be nonnegative.</dd>

<dt><b>gammaln</b></dt>
<dd>Computes the value of the natural logarithm of the
gamma function of the argument.</dd>

<dt><b>theta</b></dt>
<dd>Returns 0.0 if the argument is negative, or 1.0 if
the argument is nonnegative (i.e., zero or positive)</dd>

<dt><b>rand</b></dt>
<dd>The <code>rand()</code> function has no arguments.  It
returns a floating-point random number selected from the 
unit interval <code>[0, 1)</code> with uniform distribution.  
Example:  <code>rand()</code>.  It is worth noting that
unlike all of the other built-in mathematical functions,
<code>rand()</code> takes no arguments.  But the pair of
parentheses shown after the &quot;<code>rand</code>&quot; 
are still required.</dd>
</dl>
</blockquote>
New built-in mathematical functions may be added in 
forthcoming versions of the &appName; system.
</p>
<p>
Please remember that all elements of the &appName; system
are <a href="#casesensitive">case-sensitive</a>, 
including the aforementioned
built-in mathematical functions.  Therefore an expression
such as <code>SIN(3.14)</code> would not be recognized
as referring to the <code>sin</code> trigonometric function.
The expression would therefore be considered invalid,
because the <code>SIN</code> function would not be 
recognized as a valid built-in function.
</p>
<p>
It is important to note that all expressions are evaluated
using double-precision floating-point arithmetic.  For
functions that return an integer, such as the <code>floor()</code>
function appearing in the expression <code>A * floor(B)</code>, 
the integer result of <code>floor(B)</code> is converted to a 
double-precision floating-point number, before the result 
is used in evaluating the <code>A * floor(B)</code> expression.
</p>
<p>
The following are a few examples of valid mathematical
expressions that have been used in &appName; models:
<blockquote>
<pre>
10*(1/(1+exp(-0.0025*(-2000+time))))

alpha0 + (alpha + PY^n*alpha1)/(K^n + PY^n)

k * (A/(N*V)) * (B/(N*V))
</pre>
</blockquote>
Note that the symbols <code>time</code> and <code>N</code>
are special symbols, defined <a href="#symbols">above</a>.
</p>
</isb:docsubsection>

<isb:docsubsection name="Gillespie Stochastic Algorithm" label="gillespie">
<p>
The Gillespie stochastic algorithm is an algorithm for modeling the
kinetics of a set of coupled chemical reactions, taking into account
stochastic effects from low copy numbers of the chemical species.
The algorithm is defined in the article:
<blockquote>
<table border="1">
<tr><td>
D. T. Gillespie, &quot;A General Method for Numerically Simulating the Stochastic
Time Evolution of Coupled Chemical Species&quot;, <em>J. Comp.  Phys.</em>
<b>22</b>, 403-434 (1976).
</td></tr>
</table>
</blockquote>
In Gillespie&apos;s approach, chemical reaction kinetics are modeled
as a markov process in which reactions occur at specific instants of time
defining intervals that are Poisson-distributed, with a mean reaction 
time interval that is recomputed after each chemical reaction occurs.
For each chemical reaction interval, a specific chemical reaction occurs,
randomly selected from the set of all possible reactions with a weight
given by the individual reaction rates.  
</p>
<p>
The &appName; system provides a Java implementation of the Gillespie
algorithm, for which <a href="&webBaseURL;/javadocisb/chem/GillespieSimulator.html">more
information is available in the Javadoc documentation</a>.
</p>
</isb:docsubsection>

</isb:docsection>

<isb:docsection name="Model Elements" label="modelelement">

<!-- ========== PARAMETERS ========== -->

<isb:docsubsection name="Parameters" label="parameters">

<p>
A parameter is a name-value pair that may be referenced
symbolically (i.e., by its name) in 
<a href="#expressions">mathematical expressions</a>.  The
value is always a numeric (floating-point) value.
The parameter name must be a valid <a href="#symbols">symbol name</a>.
</p>
<p>
A parameter can be associated with a <a href="#models">model</a>,
in which case it can be referenced in the custom rate expression for
any chemical <a href="#reactions">reaction</a> associated with the model;
in addition, it can be referenced in the species population expression
for any <a href="#species">boundary species</a> within the model.
</p>

</isb:docsubsection>

<!-- ========== COMPARTMENTS ========== -->

<isb:docsubsection name="Compartments" label="compartments">
<p>
A compartment is an abstraction for a named region of space 
that has a fixed volume.  The contents of this volume are 
assumed to be well-stirred, so that chemical species do not
have concentration gradients within this volume.  Every 
<a href="#species">species</a> must be assigned to a 
compartment.  The volume of the compartment can be used 
to compute the concentration of the species, from the 
number of molecules (population) of the species in the
compartment.  
</p>
<p>
Users of the <a href="#ccmdl">Condensed
Chemical Model Definition Language</a> typically use the
built-in (default) compartment &quot;<code>univ</code>&quot;,
eliminating the need to explicitly define a compartment.
In the <a href="#cmdl">Chemical Model Definition Language</a>,
it is always necessary to explicitly define at least one
compartment, with which species can be associated.  It is
permissible to define more than one compartment; this is
sometimes done in order to separately model the populations
of chemical species in two distinct volumes, for example,
&quot;nucleus&quot; and &quot;cytoplasm&quot;.
</p>

</isb:docsubsection>

<!-- ========== SPECIES ========== -->

<isb:docsubsection name="Species" label="species">
<p>
A species is an abstraction representing a type of molecule or
molecular state.  A species has a name, which must be unique;
in addition, a species must be assigned to one (and only one)
compartment.  A species can also be assigned a population value, 
which must be an integer (subject to an exception described below).
There are two types of species in the &appName; system, <b>floating</b>
species and <b>boundary</b> species.  
</p>
<p>
A floating species
is a species whose population is affected by reactions
in which it participates.  For example, if a reaction takes
species X as a reactant, and does not produce species X as
a product, then when this reaction occurs, the population
of species X is decremented by one.  The floating species
is the most commonly used species type, and it is the 
default species type for species in the &appName; system.
</p>
<p>
A boundary species is a species whose population is 
externally specified as a boundary condition for the simulation.
The population of a boundary species is not affected by
the occurrence of reactions in which the species participates.
In this sense, a boundary species is not &quot;dynamical&quot;.
The population of a boundary species can be set to a constant,
or a more complex tim-dependent function.  The details of
how to define the population of a boundary species will
be discussed further below.
</p>
<p>
Occasionally it is desirable to create a model in which
a given species can reside in more than one compartment.
This is accomplished in the &appName; system by defining
two different species with similar (but still distinct)
names, and assigning each species to a different compartment.
For example, one might define two different species
named &quot;<code>SpeciesX_cytoplasm</code>&quot; and
&quot;<code>SpeciesX_nucleus</code>&quot;, representing
the instances of chemical species &quot;X&quot; in the
cytoplasm and nucleus, respectively.
</p>
</isb:docsubsection>




<!-- ========== REACTIONS ========== -->

<isb:docsubsection name="Reactions" label="reactions">
<p>
A <b>reaction</b> is a one-way process in which zero
or more chemical species may interact, transforming into
zero or more (possibly different) chemical species.  
The interacting species are the <b>reactants</b>, and the 
chemical species that are produced are called the 
<b>products</b>.  
</p>
<p>
Here, &quot;one-way&quot; means that a single reaction
defines a process that can only proceed from reactants 
to products.  The &quot;reverse&quot; reaction is not
implicitly defined.  In order to model a chemical system with a 
&quot;reversible&quot; reaction, a second reaction must 
be defined in which the roles of reactants and products 
are swapped. 
</p>
<p>
The mention of &quot;zero species&quot; above merits some 
explanation.  Consider the case of a chemical reaction with
zero reactants and a finite number of products.  This represents
a process in which the products are spontaneously created, 
somewhat like pair creation of an electron-positron pair
from the vacuum, in the presence of a strong electic field.
The case of zero products and a finite number of reactants
represents a process of annihilation of the reactant
molecules, such as in electron-positron pair annihilation.  
Note that a reaction with zero reactants <em>and</em> zero 
products is not permitted by the &appName; system.  The
cases of zero reactants or zero products are somewhat
degenerate, but are useful for defining a signal molecule
with an (ensemble-averaged) equilibrium population that is a time-dependent
function.  For example, one can model a signal molecule
&quot;<code>S</code>&quot; whose equilibrium population 
is a specified function of time by considering two separate 
</p>
<p>
It is permissible for a chemical species to participate
in a reaction as both a reactant and a product, as shown
here:
<blockquote>
<pre>
A + B -&gt; A + C
</pre>
</blockquote>
In such a reaction, a single molecules of species 
<code>A</code> is used in the reaction, but also
produced, so the net change in the population of 
species <code>A</code> from this reaction is zero.
Note that such a reaction is not a good model of catalysis.
A simple model of catalysis in which species <code>A</code>
catalyzes the transformation of species <code>B</code> into
species <code>C</code> would involve at least
three reactions, as shown here:
<blockquote>
<pre>
A + B -&gt; AB
AB -&gt; A + B
AB -&gt; A + C
</pre>
</blockquote>
with appropriate conditions on the relative rates
of the second and third reactions.  Note that the species
named &quot;<code>AB</code>&quot; represents the 
enzyme-substrate complex.
</p>
<p>
The above discussion assumes that species participating
in reactions are &quot;floating&quot; (dynamical) species.
As described above in the <a href="#species">species</a>
section, a species can also be defined as a &quot;boundary&quot;
species.  In this case, the population of the species is
not dynamical but instead a boundary condition of the
system.  As an illustration, suppose that species 
<code>X</code> is declared as a boundary species.
Even if species <code>X</code> were to appear in a
reaction as a reactant, such as in the reaction
<code>X + A -&gt; B</code>, the population of species
<code>X</code> would not be affected by the occurrence
of this reaction.  This is mostly useful for defining
a species whose role in a system is as an externally
applied &quot;signal&quot; or &quot;input&quot;.
Note that special notation is used to describe a
boundary species in the Condensed Chemical Model Definition 
Languae (CCMDL), as described <a href="#ccmdl">below</a>.
</p>

</isb:docsubsection>

<!-- ========== REACTION RATES ========== -->

<isb:docsubsection name="Reaction Rates" label="reactionrates">
<p>
A reaction rate is defined as the probability density
per unit time, of a given chemical reaction occurring.
In the &appName; system, there are two methods of defining
reaction rates, the <b>built-in method</b>
and the <b>custom expression method</b>.  
The built-in method is the default method used, and 
it is preferred for reasions of 
computational performance (speed).
</p>
<p>
<a name="reactionratebuiltin" />
In the <b>built-in method</b> of defining a reaction
rate, one specifies a numeric <b>reaction parameter</b>.
The units of the reaction parameter depend on the
<a href="#reactionratespeciesmode">reaction rate species mode</a>
attribute of the <a href="#model">model</a> with which
the reaction is associated.  
</p>
<p>
If the model&apos;s reaction rate species mode is <b>molecules</b>
(the default), the reaction parameter represents the 
numeric reaction probability density per unit time,
<em>per distinct combination of reactant molecules</em>.
The reaction rate is then obtained by first computing
the number of distinct combinations of reactant molecules
(which depends on the populations of the various reactant
species), and multiplying this number by the reaction
parameter for the reaction.  The result is the reaction 
rate. 
</p>
<p>
If the model&apos;s reaction rate species mode is <b>concentration</b>,
the reaction parameter represents the kinetic constant for
the reaction, in units of inverse molar concentration to the
power of the number of reactant species, per unit time.
In this case, the concentration of each reactant species is
computed, and the concentrations are multiplied together
(with suitable exponentiation for a reactant species that
has a stoichiometry greater than one).  The result is then
multiplied by the reaction parameter, to produce the reaction rate.
</p>
<p>
<a name="reactionratecustom" />
In the <b>custom expression method</b> of defining a
reaction rate, one specifies a textual <b>reaction rate
expression</b>.  This expression is a 
<a href="#expressions">mathematical expression</a>
involving symbols, arithmetic operators, and simple 
built-in mathematical functions.  Symbols can be 
<a href="#species">species names</a> or parameters.
A species name appearing in the expression represents
either the number of molecules of the species, or
the species concentration, depending on the
<a href="#reactionratespeciesmode">reaction rate
species mode</a> of the model with which the
reaction is associated.  The custom expression
method is less desirable than the built-in
method, due to the computational overhead of
evaluating the mathematical expression for each
reaction event during the simulation of the model.
</p>
</isb:docsubsection>

<!-- ========== MODELS ========== -->

<isb:docsubsection name="Models" label="models">
<p>
In the &appName; system, a <b>model</b> is a collection of
one or more <a href="#reactions">reactions</a>, together
with all of the chemical <a href="#species">species</a>
involved in the reactions, and any 
<a href="#parameters">parameters</a>
defined for the model or the reactions.  In addition,
a model contains all of the <a href="#compartments">compartments</a>
with which the species are associated.  Note that
a model does not incorporate the initial species populations.
Initial species populations are supplementary information
that, together with a model, form the basis for initiating
a simulation.
</p>
<p>
In the <a href="#cmdl">CMDL</a> language, a model
is defined by default, and does not need to be explicitly
defined in a model definition file.  In the 
<a href="#ccmdl">CCMDL</a> language, a model always
needs to be explicitly defined.
</p>
<p>
<a name="reactionratespeciesmode" />
A model has an important attribute called the
<b>reaction rate species mode</b>.  This attribute
controls how a given species contributes to a reaction
rate.  It has two possible values, <b>molecules</b> and
<b>concentration</b>.  Each will be defined in turn.
</p>
<p>
In the <b>molecules</b> reaction rate species mode,
the contribution of any given species to a reaction
rate is always computed using the number of molecules
of the species.  In the case of the 
<a href="#reactionratebuiltin">default method of
computing the reaction rate</a>, this means that
the reaction rate is computed as the number of
distinct 
</p>

</isb:docsubsection>



<!-- ========== SPECIES POPULATIONS ========== -->

<isb:docsubsection name="Species Populations Collections" label="speciespopulations">
<p>
In order to simulate the kinetics of a set of chemical reactions,
it is necessary to define initial conditions.  This means defining
the initial species populations for all species in the model.  In
addition, the time series results of a simulation consist of
&quot;snapshots&quot; of the species population values at different times.
Species populations are stored in &quot;species populations collection&quot;
data structures.  Such a structure maps a species name to a
&quot;population value&quot;.  Floating species must have an integer 
population value.  Bounday species may have a fixed population
defined (which must be an integer), or they may have their population
defined as a mathematical expression involving the symbol &quot;time&quot;,
which represents the amount of time elapsed in the simulation.
</p>
<p>
At this time, the stochastic simulator in the &appName; system
does not permit defining an arbitrary probability distribution 
of initial conditions.  Instead, precise initial species populations 
for all species must be defined; these initial populations do 
not vary across different realizations in the ensemble.
</p>
</isb:docsubsection>

<!-- ========== MODEL INSTANCE ========== -->

<isb:docsubsection name="Model Instances" label="modelinstance">
<p>
A <a href="#models">model</a> together with initial data consisting
of <a href="#speciespopulations">species populations</a> for all
chemical species at the initial time for the simulation, are known
collectively as a <b>model instance</b>.  A model instance is the
starting point for running a simulation.  A model instance may be
defined by taking any model and any collection of initial species
populations, provided that every species in the model has a corresponding
population value in the species populations collection.  
</p>
</isb:docsubsection>

</isb:docsection>


<!-- ========== CMDL COMMON CONCEPTS ========== -->
<isb:docsection name="Chemical Model Definition Language Common Concepts" label="commonconcepts">

<p>
A <a href="#modelinstances">model instance</a> can be defined 
using one or more text files, known as <b>model definition</b> 
files.  These files can (subject to certain restrictions) be 
in any of three languages:
<ul>
<li>Chemical Model Definition Language (CMDL)</li>
<li>Condensed Chemical Model Definition Language (CCMDL)</li>
<li><a href="&sbmlURL;">Systems Biology Markup Language</a> (SBML)</li>
</ul>
Each language has different strengths and limitations.  The
model definition file specifies one or more <a href="#models">models</a>
and <a href="#speciespopulations">species populations collections</a>.
Once the model definition file has been loaded into &appName;,
the models and species populations collections are available for
simulation.  One can select a model and a species populations
collection (known collectively as a &quot;model instance&quot;),
and simulate the dyamics of the model with the given species
populations collection as the initial conditions.
</p>


<!-- ========== Numeric Macros ========== -->
<isb:docsubsection name="Numeric Macros" label="numericmacros">
<p>
Both the CMDL and the CCMDL support a <b>numeric macro</b>
construct.  This is a name-value pair in which the name
is required to be a valid <a href="#symbols">symbol name</a>,
and the value is required to be a number.   Numeric macros
are referenced using a square bracket notation, as shown in the
sections describing the <a href="#cmdl">CMDL</a> and
the <a href="#ccmdl">CCMDL</a> languages below.
</p>
<p>
Although they are superficially similar, numeric macros
differ from <a href="#parameters">parameters</a> in that
parameters are associated with a <a href="#models">model</a>
or <a href="#reactions">reaction</a>, and are exported 
along with a <a href="#modelinstances">model instance</a>.
Parameters, when referenced in a rate expression or elsewhere,
are not evaluated by the parser.  Instead, they are evaluated
by the underlying scripting engine, when the mathematical
expression (e.g., rate expression) is evaluated in the
course of running a simulation.  In contrast, numeric
macros are evaluated by the parser, and the parser substites
values for macro references as it parses the model definition
file.  Parameters are supported mostly for compatibility
with SBML.  In the CMDL and CCMDL, it is often more convenient
to use numeric macros.  This avoids needless parameter lookups
during the execution of a simulation, because the parser
translates macro references to numeric literals before
the parsed model definition is passed to the scripting engine.
</p>

</isb:docsubsection>

<!-- ========== STATEMENTS ========== -->

<isb:docsubsection name="Statements" label="statements">
<p>
Both the CMDL and CCMDL languages are centered around the concept
of a <b>statement</b>.  Model definition files are broken into
statements by use of the reserved symbol &quot;<code>;</code>&quot;,
the semicolon.  Each statement must terminate with a semicolon, even
if there is only one statement in the file.  The CMDL or CCMDL
model definition file is tokenized and parsed by the parser, and
turned into an ordered collection of statements that are executed
by the scripting engine.  In this way, there is a logical decoupling
between parsing of model definition files and the execution of the
statements defining the model.  Statements are processed in the order
in which they appear in a model definition file. 
</p>
<p>
There are two types of statements, known as <b>statement categories</b>.
The first and most important category of statements is known as
<b>model definition statements</b>.  This category of statements
includes all statements that define model elements, such as
species, reactions, parameters, etc. 
</p>
<p>
The second category of statements is known as <b>action performers</b>.
These statements instruct the scripting engine to perform a concrete
action, such as conducting a simulation, exporting a model definition,
printing the contents of a data structure, etc.  This category of 
statements is supported only for use with the command-line interface
to the &appName; system.  The graphical user interface for the
&appName; system allows only the model definition statement category,
and ignores any statements in the &quot;action performers&quot;
category.  This is because in the graphical user interface, various
graphical elements (menu items, dialog boxes, and other controls)
are used to instruct the application to perform actions, rather
than the scripting language.
</p>

</isb:docsubsection>

<!-- ========== Elements ========== -->
<isb:docsubsection name="Elements" label="elements">
<p>
<a href="#statements">Statements</a> may contain
zero or more <b>elements</b>, that can be thought of
as modifiers that specify information about the statement.  
Elements may occur in any order within a statement; the
order in which the elements appear in a statement is not important.
For the case of a chemical <a href="#reactions">reaction</a>
statement, the reaction rate is a required element, that
specifies the rate of the reaction being defined.
</p>
<p>
An element can be one of several possible data types.  
</p>
<p>
<b>Numeric</b> elements are evaluated by the parser
and stored as a double-precision floating-point value.
A mathematical expression may be used to define
a numeric element; in this case, the mathematical
expression is evaluated by the parser, and the result
is the value of the numeric element. A mathematical
expression used to define a numeric element is
represented using square brackets, as shown in the
following example:
<blockquote>
<pre>
[A + B / 2.0]
</pre>
</blockquote>
In an expression used to define a numeric element,
all symbols must be previously defined 
<a href="#numericmacros">numeric macros</a>.
</p>
<p>
<a name="stringelements" />
<b>String</b> elements are evaluated by the parser 
and stored as a variable-length text string.  A
mathematical expression may be embedded in a string
element.  In this case, the parser evaluates the
expression and embeds a formatted representation
of the value of the expression, into the string,
at the point where the expression was located.
A mathematical expression embedded in a text string is
represented using a dollar-sign-square-bracket construct, 
as shown in the following example:
<blockquote>
<pre>
"the value of my expression is: $[A + B / 2.0]"
</pre>
</blockquote>
In the above example, the parser would attempt to
evaluate the mathematical expression 
<blockquote>
<pre>
A + B / 2.0
</pre>
</blockquote>
In which the symbols <code>A</code> and <code>B</code>
are previously defined 
<a href="#numericmacros">numeric macros</a>.  Assuming 
that <code>A</code> was previously defined with a value
of 1.0, and that <code>B</code> was previously defined
with a value of 2.0, the parser would evaluate the
mathematical expression and get a result of 2.0.
In this case, the above string element would be equivalent to:
<blockquote>
<pre>
"the value of my expression is: 2.0"
</pre>
</blockquote>
</p>
<p>
It should be noted that in some cases in the 
<a href="#ccmdl">CCMDL</a> language, string elements are
<em>implied</em>, even though no double quotes are used.
For example, in defining a <a href="#reactions">reaction</a>
in the CCMDL, the reaction name is specified without 
double quotes.  Despite this, the reaction name is implicitly
a string element, which has certain implications for
embedding mathematical expressions within the string,
as described <a href="#numericmacrosexpressions">below</a>.
</p>
<p>
The details of how <b>elements</b> make up statements
will be described in the sections defining the
<a href="#ccmdl">CCMDL</a> and the <a href="#cmdl">CMDL</a>
languages below.
</p>
<p>
An important point about quoted strings is that they may not
be continued across lines of input.  The &appName; parser will
signal an error if a quoted string is not terminated on the
same line of input where it is initiated.  Thus the following
input statement would be a syntax error:
<blockquote>
<table>
<tr>
<td>
<b>ILLEGAL:</b>&nbsp;&nbsp;&nbsp;&nbsp;
</td>
<td>
<pre>
printModel "my
           model";
</pre>
</td>
</tr>
</table>
</blockquote>
because the string that begins with &quot;my&quot; ends on a
different line than the line where the string begins.
</p>
<p>
<b>Data list</b> elements are elements that contain
one or more subelement.  Data lists are indicated
with parentheses.  An example data list element containing
string elements is shown here:
<blockquote>
<pre>
("A" "B" "C")
</pre>
</blockquote>
An example data list element containing numeric elements 
is shown here:
<blockquote>
<pre>
(1.0 3.0 1.0)
</pre>
</blockquote>
It is even possible to mix subelement data types in
a data list element, as shown here:
<blockquote>
<pre>
(1.0 "A" 2.0)
</pre>
</blockquote>
Note that not all types of data lists are permitted 
to be used in every <a href="#statements">statement</a>
context.  
</p>
<p>
It is allowed to define a data list with zero elements,
as shown here:
<blockquote>
<pre>
( )
</pre>
</blockquote>
</p>
<p>
<b>Modifier</b> elements are analogous to keywords.
A modifier element is represented by a single
bareword, such as &quot;<code>on</code>&quot; or
&quot;<code>off</code>&quot;.  Modifiers are typically 
used to describe an aspect of a statement that has
a finite, discrete set of possible values.  For example,
in the <a href="#cmdl">CMDL</a> language, 
the statement that defines a <a href="#species">species</a>, 
allows for a species to be &quot;floating&quot; or
a &quot;boundary&quot; species.  Therefore two modifiers
are permitted, only one of which can be specified for
a given species definition statement:  
&quot;<code>floating</code>&quot;
and &quot;<code>boundary</code>&quot;.  Note that in a
statement context, only certain modifiers are
allowed.
</p>

</isb:docsubsection>


<isb:docsubsection name="File Inclusion" label="fileinclusion">
<p>
In the &appName; system, a model definition file may include
another model definition file.  This include mechanism is
permitted in both of the command-language-based model definition
language.  Model definitino file inclusion works just as it
does with the preprocessor in the C programming language.
The parser splices the text of the included file into the
including file, at exactly the point where the &quot;include
directive&quot; occurs.  There is a built-in mechanism to 
prevent cyclic inclusion of files.  If file <code>A</code>
includes file <code>B</code>, and file <code>B</code>
includes file <code>A</code>, then the parser will simply
ignore the include directive inside file <code>B</code>,
since it will already have processed file <code>A</code>.
</p>
<p>
The include mechanism is useful for separating out 
&quot;boilerplate&quot; macro definitions thare are shared
from model to model.  In addition, the include mechanism 
might potentially be useful for extending a model.
</p>
<p>
The specific syntax for including a model definition file
within another model definition file, is shown here:
<blockquote>
<pre>
include "myFile&ccmdlExtension;";
</pre>
</blockquote>
where &quot;<code>myFile&ccmdlExtension;</code>&quot; is the name of the file 
that is to be &quot;included&quot;.  The contents of 
&quot;<code>myFile&ccmdlExtension;</code>&quot; are parsed at exactly the
point where the include statement is encountered in the file,
after all statements in the <em>including</em> file preceding
the <code>include</code> statement have been parsed.  
Note that the double-quotes and the semicolon are required.
It is <em>not allowed</em> to embed a file inclusion statement
inside a <a href="#loops">loop</a> construct.  Normally,
file includes are placed at the top of a model definition file,
in order to load a separate file containing &quot;boilerplate&quot;
macro definitions and reaction definitions that are shared
between different models.
</p>
<p>
Please take note of the following rules (which are admittedly
a bit jabberwockeyan):  A CCMDL file may include other CCMDL or 
<a href="#cmdl">CMDL</a> files.  However, a CMDL file may not include
a <a href="#ccmdl">CCMDL</a> file, because the parser will not 
have the proper CCMDL translator initialized to translate the included
CCMDL file into the CMDL language.
</p>

</isb:docsubsection>

<isb:docsubsection name="Comments" label="comments">
<p>
Both the CMDL and the CCMDL provide a mechanism for
embedding explanatory comments in a model definition file.
A comment is a fragment of text beginning with a pound sign
character (&quot;<code>#</code>&quot;).  All text from the
pound sign character, to the end of the line, are considered
by the parser to be a comment, and are ignored.  The following
example shows an example of a comment:
<blockquote>
<pre>
        # this is a comment
</pre>
</blockquote>
It is acceptable to include a comment on the same line as an
actual statement, as shown here:
<blockquote>
<pre>
&lt;some statement&gt;;    # this is a comment
</pre>
</blockquote>
In the above example, the statement would be parsed, but everything
after (and including)  the pound sign would be ignored.
</p>
<p>
The &appName; system also supports <em>multi-line comments</em>.
The syntax for a multi-line comment is identical to a comment in
the C programming language:
<blockquote>
<pre>
/*
  this is a comment
  
  this is also a comment
 */
</pre>
</blockquote>
The parser will ignore anything between the &quot;<code>/*</code>&quot;
and the &quot;<code>*/</code>&quot; symbols.  This can be  useful for
temporarily commenting out multiple lines of your model definition file,
as shown here:
<blockquote>
<pre>
/*
 commented out temporarily for testing purposes (sramsey 2003/05/09)
G4_dimer_binding_at_DNA4,     G4D_free + DNA4 -&gt; G4D_DNA4,     [kf];
G4_dimer_debinding_at_DNA4,   G4D_DNA4 -&gt; G4D_free + DNA4,     [kr];
 */
</pre>
</blockquote>
Using the multiline comment syntax for this case is easier beacause
you do not have to add a pound symbol &quot;<code>#</code>&quot; to each
line that you are commenting out.
</p>
</isb:docsubsection>

<isb:docsubsection name="Exporter Plug-ins" label="exporterplugins">
<p>
The &appName; system has two different plug-ins for exporting
a <a href="#modelinstances">model instance</a> to different formats.
Each exporter plug-in has an <b>exporter alias</b> defined.  The
default exporter is the exporter for <a href="#sbml">Systems Biology
Markup Language</a> (SBML).  The SBML exporter has the exporter
alias &quot;<code>markup-language</code>&quot; (quotes not included).
The full list of exporters is defined here:
<blockquote>
<dl>
<dt><code>markup-language</code></dt>
<dd>exports a model instance to <a href="#sbml">SBML</a>
<p />
</dd>
<dt><code>command-language</code></dt>
<dd>exports a model instance to <a href="#cmdl">CMDL</a>
<p />
</dd>
</dl>
</blockquote>
Currently there is no exporter plug-in for the 
<a href="#ccmdl">CCMDL</a> language.  This is because
the CCMDL language is not sufficiently expressive to
describe the full range of possible models that can 
be defined in the &appName; system.
Additional exporter plug-ins may be defined in the future.
</p>
</isb:docsubsection>

<!-- ========== SIMULATOR PLUG-INS ========== -->
<isb:docsubsection name="Simulator Plug-Ins" label="simplugins">
<p>
The &appName; system has a framework for pluggable simulation
modules.  Each simulator plug-in has a simulator &quot;alias&quot;.
The available simulator plug-ins are:
<blockquote>
  <dl>
  <dt><code>gillespie</code></dt>
  <dd>An implementation of the 
<a href="#gillespie">Gillespie stochastic algorithm</a>
for modeling the reaction kinetics.  Ths algorithm is described in the article
</dd>
  </dl>
</blockquote>
Each simulator above is identified by its &quot;simulator alias&quot;.
The simulator alias for the Gillespie algorithm is &quot;<code>gillespie</code>&quot;.
</p>
</isb:docsubsection>

</isb:docsection>


<!-- ========== CCMDL ========== -->

<isb:docsection name="Condensed Chemical Model Definition Language (CCMDL)" label="ccmdl">

<p>
The Condensed Chemical Model Definition Language (CCMDL) is a simplified
model definition language designed to minimize the amount of repetitive
typing required to define a model.  It lacks some of the power and flexibility 
of the <a href="#cmdl">Chemical Model Definition Language</a> (CMDL), but it is
significantly easier to read and write.  The default file extension of model
definition files in the CCMDL language is the &quot;<code>&ccmdlExtension;</code>&quot;
suffix.
</p>
<p>
The CCMDL is implemented as 
a preprocessor that translates CCMDL statements appearing within 
the model definition file into the equivalent CMDL statements.  The resulting
CMDL statements are then passed to the &appName; scripting engine. In general
it is permissible to include CMDL statements within a CCMDL file; the 
preprocessor should pass them through unmodified.  This might potentially be useful for
circumventing certain limitations of the CCMDL model definition language.
</p>

<isb:docsubsection name="Default Model Elements" label="defaultmodelelements">
<p>
One of the distinguishing aspects of the CCMDL is that several core
elements are created by default:
<ul>
<li>A <a href="#models">model</a> is created, with model name 
&quot;<code>myModel</code>&quot;.</li>
<li>A <a href="#speciespopulations">species populations collection</a> 
is created, with species populations collection name &quot;<code>sp</code>&quot;.</li>
<li>A <a href="#compartments">compartment</a> is created, with 
name &quot;<code>univ</code>&quot; and volume of 1.0 liters</li>
</ul>
This provides a built-in &quot;context&quot; for reaction and species
definitions, without having to manually declare the model, compartment, and
species populations collection.  Furthermore, species are defined implicitly
through reaction definitions.  Defining a reaction implicitly defines
all of the reactant and product species that are declared to participate
in the reaction.  All species definitions thus implicitly defined are
automatically associated with the default (&quot;<code>univ</code>&quot;)
compartment.  All reactions are automatically associated with the 
default model (&quot;<code>myModel</code>&quot;).
</p>
<p>
The default &quot;model&quot; in the CCMDL language has a 
<a href="#reactionratespeciesmode">reaction rate species mode</a>
of &quot;molecules&quot;.  In order to use a reaction rate
species mode of &quot;concentration&quot;, it is necessary to
use the <a href="#cmdl">CMDL language</a> instead of the CCMDL 
language.
</p>
<p>
A special note is in order about <a href="#fileinclusion">file
inclusion</a> in the CCMDL.  When a file is included within another
model definition file, all reaction definitions in the included file are
made for the context of the default model for the including file.
The included file does <em>not</em> get is &quot;own&quot; default
model context.  Similarly, the included file does not get its own
default species populations context; it simply inherits the context
from the including file. 
</p>

</isb:docsubsection>

<isb:docsubsection name="Reaction Statements" label="reactionstatements">
<p>
A CCMDL model definition (usually, but not always, a single file) consists
of a series of <b>statements</b> which are text strings separated by
semicolons.  Whitespace and newlines are ignored by the CCMDL parser.
</p>
<p>
The centerpiece of the condensed model definition
language is the reaction statement.  A reaction statement
defines a one-way chemical reaction in which zero or
more chemical species participate as reactants, and zero
or more chemical species participate as products.  The 
reaction statement implicitly defines the chemical species,
if they have not been defined by a previous reaction 
statement.  Reaction statements have three <em>elements</em>
separated by commas.  The first element is the reaction name,
and it is an optional element.  The second element defines
the reactants and products.  The third element defines the
reaction rate.  The following example shows a reaction 
statement in the condensed model definition language:
<blockquote>
<pre>
creation_of_c_d,  A + B -&gt; C + D,  1.0;
</pre>
</blockquote>
As explained above, the statement ends with the semicolon 
character  &quot;<code>;</code>&quot;.
Note the use of the comma character &quot;<code>,</code>&quot;
to separate different <em>elements</em> of the statement.
The statement causes the following definitions to be made:
<ul>
<li>a floating species <code>A</code>, in the default compartment</li>
<li>a floating species <code>B</code>, in the default compartment</li>
<li>a floating species <code>C</code>, in the default compartment</li>
<li>a floating species <code>D</code>, in the default compartment</li>
<li>a reaction <code>creation_of_c_d</code>, in which 
species <code>A</code> and <code>B</code> participate
as reactants, and in which species <code>C</code> and
<code>D</code> are products.</li>
<li>the reaction rate of the <code>creation_of_c_d</code>
reaction is computed using the 
<a href="#reactionratebuiltin">built-in
method</a>, with a reaction parameter of 1.0.</li>
</ul>
Please note that if the reaction name is omitted, 
the first comma must be omitted as well, as shown here:
<blockquote>
<pre>
A + B -&gt; C + D,  1.0;
</pre>
</blockquote>
In this case, a default reaction name is assigned by
the &appName; parser.
</p>
<p>
In many cases, it is desirable to specify a 
<a href="#reactionratecustom">custom reaction rate</a>, 
rather than using the built-in method of
computing the reaction rate.   To specify a custom
reaction rate, the reaction rate element should be
defined as a string data type.  This is accomplished
by substituting a quoted string containing a 
mathematical expression, in lieu of the literal
numeric reaction parameter.  For the example of
the above reaction, one might write:
<blockquote>
<pre>
creation_of_c_d,  A + B -&gt; C + D,  "2.0 * A * B";
</pre>
</blockquote>
The double quotes are required in order to tell the
parser that the reaction rate is a custom reaction rate.
The text inside the quotes is parsed as a
<a href="#expressions">mathematical expression</a>
that typically involves species name symbols, numeric literals,
and arithmetic operators.  In addition, a mathematical
expression may involve built-in functions (e.g., 
<code>log()</code> or <code>gammaln()</code>) and
special symbols such as &quot;<code>time</code>&quot;.
In the above example, the reaction rate will be computed
as the product of the number <code>2.0</code> times the
product of the populations of species <code>A</code> and 
<code>B</code>, in molecules.  Note that this is in contrast 
to the <a href="#cmdl">CMDL</a>, in which a species symbol
appearing in a reaction rate expression can potentially
refer to the <em>concentration</em> of the chemical
species, or to the populations of the species (in molecules).
</p>
<p>
It should be emphasized that the CCMDL parser determines
which type of reaction rate computation method to use, based
on the <em>data type</em> of the third element (the text 
that appears after the second comma) of the reaction
definition.  As shown above, if the data type is numeric, the
parser will use the built-in reaction rate computation method.
If the data type is a quoted string, the parser will assume
that the reaction rate computation method is a custom rate
whose expression is contained in the string.  This is why
it is essential to include the double-quotes when defining
a chemical reaction with a custom reaction rate expression.
</p>
<p>
Note that specifying a custom reaction rate using a
mathematical exprssion in a quoted string has a significant
drawback, relative to using the built-in method of computing
the reaction rate.  The custom reaction rate method increases
the computational complexity of the simulation, therefore
making the simulation of the model slower.  Therefore,
reaction rates should be specified using quoted strings
containing mathematical expressions, only in those cases
where it is truly necessary to do so. 
</p>

</isb:docsubsection>

<isb:docsubsection name="Numeric Macros and Expressions" label="numericmacrosexpressions">
<p>
Often, a single numeric value will be used frequently
throughout a model definition file.  For example, a reaction
rate parameter of <code>1.0</code> may be used for many reactions
in a given model definition file.  This can make it tedious
to modify the parameter once the model definition file has
been written.  The <a href="#numericmacros">numeric macro</a>
construct makes it easier to centralize definition of numeric
values or parameters, in the model definition file.  In defining
a numeric macro in a CCMDL model definition file, it is required
that the macro name not conflict with any species names previously
defined.  Here, &quot;previously&quot; means at a point higher
up in the model definition file that is being parsed.
When the CCMDL parser encounters a statement such as this:
<blockquote>
<pre>
k = 1.0;
</pre>
</blockquote>
If no species &quot;<code>k</code>&quot; has been previously
(implicitly) declared by listing &quot;<code>k</code>&quot; as
a participating species in a chemical reaction, then 
&quot;<code>k</code>&quot; is declared as a numeric macro with
the value <code>1.0</code>.  If the symbol &quot;<code>k</code>&quot;
has been previously declared as a reactant or product in a chemical
reaction, the statement is taken to mean that the initial
species population of species &quot;<code>k</code>&quot; is
the value <code>1.0</code>.
</p>
<p>
To refer to a macro, square brackets are used.  For example,
to define a reaction in which the reaction rate is the
built-in reaction rate method, with a reaction rate parameter
given by the value of the macro &quot;<code>k</code>&quot;,
one would write a statement such as this:
<blockquote>
<pre>
creation_of_c_d,  A + B -&gt; C + D,  [k];
</pre>
</blockquote>
The square brackets instruct the parser that the symbol
within the square brackets is a numeric macro whose value
should be substituted in place of the token 
&quot;<code>[k]</code>&quot; as the model definition
file is being parsed.  The parser would then automatically
(and transparently) translate the above statement into:
<blockquote>
<pre>
creation_of_c_d,  A + B -&gt; C + D,  1.0;
</pre>
</blockquote>
provided that the numeric macro &quot;<code>k</code>&quot;
had been previously defined as described above.
</p>
<p>
It is also possible to embed a macro reference in
a quoted string element, such as in a custom reaction
rate expression:
<blockquote>
<pre>
creation_of_c_d,  A + B -&gt; C + D,  "$[k] * A * B";
</pre>
</blockquote>
Note the dollar sign preceding the &quot;<code>[k]</code>&quot;.
The dollar sign is required when a macro reference is embedded
in a quoted string (i.e., in a fragment of text between
double-quote characters).  
</p>
<p>
A macro definition may reference another macro, as shown
here:
<blockquote>
<pre>
k1 = 1.0;
k2 = [k1];
</pre>
</blockquote>
The above definition is equivalent to:
<blockquote>
<pre>
k1 = 1.0;
k2 = 1.0;
</pre>
</blockquote>
In this case, the parser immediately
substitutes <code>1.0</code> when the
token &quot;<code>[k1]</code>&quot; is
encountered.
</p>
<p>
Beyond being useful for macro references, the square
brackets actually instruct the parser to evaluate
a mathematical expression, in which symbols are understood
to be macro references.  The following example containing
two macro definitions illustrates:
<blockquote>
<pre>
k1 = 1.0;
k2 = [k1 + 1.0];
</pre>
</blockquote>
The above definitions are equivalent to:
<blockquote>
<pre>
k1 = 1.0;
k2 = 2.0;
</pre>
</blockquote>
The parser, upon encountering the square brackets,
translates everything inside the square brackets as
a mathematical expression.  Any symbols appearing
in that expression must be previously defined numeric
macros; the values of the macros are used in evaluating
the expression.
</p>
<p>
Note that the dollar-sign-square-bracket construct
used in quoted strings, also evaluates everything
inside the square brackets as a mathematical expression.
This permits constructions as shown here:
<blockquote>
<pre>
k1 = 1.0;
my_reaction, A + B -&gt; C + D, "$[k1 + 1.0] * A * B";
</pre>
</blockquote>
The parser will attempt to evaluate the text in between
the square brackets as a mathematical expression in which
symbols are numeric macros that must have been previously
defined.  In this case, after the expression is evaluated,
the above statements would be equivalent to:
<blockquote>
<pre>
k1 = 1.0;
my_reaction, A + B -&gt; C + D, "2.0 * A * B";
</pre>
</blockquote>
</p>
<p>
The mathematical expression facility allows
for using the special symbol <code>time</code>
to include simulation time.  As an illustration,
consider the following exmple reaction definition:
<blockquote>
<pre>
my_reaction, A + B -&gt; C + D, "2.0 * A * B * time^0.5";
</pre>
</blockquote>
The above defines a reaction in which the reaction
rate increases as the square root of the elapsed
time.  
</p>
<p>
In addition to the <code>time</code> symbol,
there is a special symbol <code>N</code> that
defines the Avogadro constant.  This is occasionally
useful if you have a numeric macro that you wish
to specify in terms of moles.  For example:
<blockquote>
<pre>
k = [3.6 * 10^(-45)];
my_reaction, A + B -&gt; C + D, "k * N * A * N * B";
</pre>
</blockquote>
In the above definition, the macro <code>k</code>
is defined in terms of inverse moles squared.
So to regain the correct units in the reaction
rate expression, the factor <code>N</code>
is multiplied by each species symbol appearing
in the reaction rate expression.
</p>
<p>
In addition to using mathematical expressions and
macros to define the reaction rate, one can also
use mathematical expressions and macros in defining
the reaction name, and even the reactant/product
species.  In this case, it is important to remember
that the reaction name, and the name of any species
participating in a reaction, are <em>implicit string
elements</em>.  This means that they are evaluated
by the parser as if they are string elements, even
though no double quotes are required.  Furthermore,
this means that in order to embed a mathematical
expression in the reaction name, a dollar-sign-square-bracket
construct is required.  For example, consider
the following:
<blockquote>
<pre>
k = 1;
my_reaction_$[k+1], A -&gt; B, 1.0;
</pre>
</blockquote>
Again, the dollar sign is required because
the &quot;<code>my_reaction_$[k]</code>&quot;
is parsed <em>as if it were enclosed in double quotes</em>.
In a string context, a dollar-sign-square-bracket 
is required in order to embed a mathematical expression.
The above example, after the parser translates the
mathematical expresion, would be equivalent to
the following:
<blockquote>
<pre>
k = 1;
my_reaction_2, A -&gt; B, 1.0;
</pre>
</blockquote>
Similarly, a mathematical expression can be used in
defining a species name.  The following example
illustrates this:
<blockquote>
<pre>
k = 1;
my_reaction, A$[k+1] -&gt; B, 1.0;
</pre>
</blockquote>
The above example, after the parser translates the
mathematical expression, is equivalent to
the following:
<blockquote>
<pre>
k = 1;
my_reaction, A2 -&gt; B, 1.0;
</pre>
</blockquote>
The above-described feature of embedding mathematical
expressions in the definition of string elements such 
as species names or the reaction name, is primarily
useful in conjunction with the <a href="#loops">loop</a>
construct, to be described below.
</p>

</isb:docsubsection>

<isb:docsubsection name="Specifying Species Populations" label="specifyingspeciespopulations">
<p>
In the CCMDL, the initial populations of species
are specified using a numeric element, as shown
here:
<blockquote>
<pre>
my_reaction, A -&gt; B, 1.0;
A = 100;
B = 100;
</pre>
</blockquote>
In the above example, species <code>A</code> and
<code>B</code> have their initial populations set
to 100 molecules.  Note that it is required that
the reaction definition precede the species population
definitions.  Otherwise, the parser will assume that
<code>A</code> and <code>B</code> are 
<a href="#numericmacros">numeric macros</a> instead
of species.
</p>
<p>
Instead of using a numeric literal to define the 
initial species population, it is also possible
to use a mathematical expression, as shown here:
<blockquote>
<pre>
N = 10.0;
my_reaction, A -&gt; B, 1.0;
A = [N * 10.0];
B = [N * 10.0];
</pre>
</blockquote>
In this case, the symbol <code>N</code> is 
defined as a numeric macro with value 10.0.
The initial populations of <code>A</code>
and <code>B</code> are defined as the value
of the expressions contained in the square
brackets, rounded to the nearest integer.
In the above example, the initial populations
of species <code>A</code> and <code>B</code>
are set to 100.
</p>
<p>
The above discussion has assumed that species
defined in chemical reactions are always
floating species.  In order to define a boundary
species that participates in a chemical reaction, 
the dollar sign is used, as shown in the following
example:
<blockquote>
<pre>
my_reaction, $A -&gt; B, 2.0;
A = 100;
B = 100;
</pre>
</blockquote>
In the above example, species <code>A</code> is 
defined as a boundary species with a population 
of 100.  Species <code>B</code> is
defined as a boundary species with an initial
population of 100.  Recall that the population
of a boundary species is unaffected by the 
occurrence of a chemical reaction involving
that species.  Therefore, defining the population
of a boundary species differs from that of a
floating species, in that the population definition
of a boundary species is not just for the inital
time, but for all times during the simulation.
Given that the above definition
specifies the built-in method of computing the
reaction rate, the above definition could be
simplified in the following way:
<blockquote>
<pre>
A = 100;
my_reaction,  -&gt; B, [2.0 * A];
B = 100;
</pre>
</blockquote>
In the above example, <code>A</code> has been
changed into a numeric macro, and eliminated as
a species in the reaction that produces species 
<code>B</code>.  The reaction rate has been increased
by a factor of the value of <code>A</code>.
This method of defining the reaction is slightly
preferred for reasons of computation speed.  The
fewer species in a model, and the simpler the
reactions in the model (in terms of number of 
reactant and product species), the faster it will
be to simulate the reaction kinetics of the model.
</p>
<p>
As with floating species, the population definition
for a boundary species may invole a mathematical
expression that is parsed immediately by the parser:
<blockquote>
<pre>
num = 10;
my_reaction, $A -&gt; B, 2.0;
A = [num * 10];
B = 100;
</pre>
</blockquote>
The right-hand side of the statement defining the
population of <code>A</code> is still a numeric element,
in the above example, which means that the population
value is determined by the parser, and stored as an
invariant floating-point value.
</p>
<p>
The population of a boundary species may also be
defined as a <b>late-evaluation</b> mathematical
expression.  This means that the actual <em>expression</em>
is stored by the parser, rather than the value of the expression
evaluated initially.  This is accomplished
by using a string element rather than a numeric element,
on the right-hand side of the definition of the 
boundary species population.  This is useful for two 
special cases.  Firstly, it can be used in cases where it 
is desired to have a boundary species with a non-integer
population value, as shown here:
<blockquote>
<pre>
my_reaction, $A -&gt; B, 2.0;
A = "0.5";
B = 100;
</pre>
</blockquote>
This is rarely useful, because it is always possible to just
rescale the reaction parameter and eliminate the boundary
species (that formally has the non-integer population) as a 
participatnt in the reaction.  A more useful case is when
one wishes to define a boundary species whose value actually
<em>varies over time</em>, according to a function defined
by the user.  In this case, the boundary species is still
not dynamical; the time dependence of its population value
is governed by a mathematical expression involving the
special symbol <code>time</code>, as in the following example:
<blockquote>
<pre>
my_reaction, $A -&gt; B, 2.0;
A = "10 * time";
B = 100;
</pre>
</blockquote>
In this case, the boundary species <code>A</code>
has a population that is linearly increasing with time.
</p>
<p>
Specifying the boundary species population as a
mathematical expression has a significant limitation,
in that it makes the simulation of the model more
computationally complex, and therefore, slower.  Therefore,
one should specify a boundary species population using
a string representation of a mathematical expression
<em>only</em> in cases where it is required to have
a time-varying boundary species population that is
externally controlled.
</p>
<p>
Note that it is illegal to attempt to define the 
initial population of a <em>floating</em> species as a
string element containing a mathematical expression.
</p>
<p>
The definition of the boundary species population
may include the special symbol <code>time</code>.
This is useful in cases where it is desired to
model the effects of a singnal molecule whose
population is externally controlled.
</p>
</isb:docsubsection>

<isb:docsubsection name="Loops" label="loops">
<p>
The CCMDL language contains a looping construct that
permits defining a family of model elements where
a single counter is incremented for each member of the
family.  For example, one might wish to generate a family
of species and chemical reactions, parameterized by an integer.
The species might be
<blockquote>
<pre>
A1, A2, A3, A4
B1, B2, B3, B4
</pre>
</blockquote>
and the reactions might be of the form
<blockquote>
<code>A</code><em>n</em> -&gt; <code>B</code><em>n</em>
</blockquote>
This can be accomplished with the &quot;<code>loop</code>&quot;
keyword, as shown here:
<blockquote>
<pre>
loop "i": start 1, stop 4
{
  reaction_$[i],   A$[i] -&gt; B$[i], 1.0;
}
</pre>
</blockquote>
In the above example, the symbol &quot;<code>i</code>&quot; is
the loop index, and it is incremented from 1 to 4 in steps
of one.  For each iteration of the loop, all statements between
the curly braces are executed.  More than one statement can occur
between the curly braces, although only one statement is shown here.
The <code>$[i]</code> tokens represent evaluating a mathematical
expression, in which <code>i</code> appears as a symbol.  The
<code>i</code> symbol is essentially a numeric macro whose value
is incremented for each iteration of the loop.  It is important
to note that in the above example, the dollar sign is required.  
This is because statement elements specifying the reaction
name, and the reactant/product species, are all <em>implicit string
elements</em>.  In implicit string elements, the 
dollar-sign-square-bracket construct is required in order
to embed a mathematical expression, just as in explicit strings.
After the loop statement and the embedded mathematical expressions
are processed by the parser, the above example is equivalent to:
<blockquote>
<pre>
reaction_1, A1 -&gt; B1, 1.0;
reaction_2, A2 -&gt; B2, 1.0;
reaction_3, A3 -&gt; B3, 1.0;
reaction_4, A4 -&gt; B4, 1.0;
</pre>
</blockquote>
A more nontrivial example of using the looping construct would
be to define a cascade of reactions, as shown here:
<blockquote>
<pre>
loop "i": start 1, stop 4
{
  reaction_$[i], A$[i] -&gt; A$[i+1], 1.0;
}
</pre>
</blockquote>
This example defines a cascade of reactions that ultimately
convert species <code>A1</code> into species <code>A5</code>.
After the loop statement and the embedded mathematical expressions
are processed by the parser, the above example is equivalent to:
<blockquote>
<pre>
reaction_1, A1 -&gt; A2, 1.0;
reaction_2, A2 -&gt; A3, 1.0;
reaction_3, A3 -&gt; A4, 1.0;
reaction_4, A4 -&gt; A5, 1.0;
</pre>
</blockquote>
In both of the above examples, it is usually the case
that a loop is used to define the initial species populations.
For example, one might define (after the reaction definition
loop):
<blockquote>
<pre>
A1 = 100;
loop "i": start 1, stop 5
{
  A$[i] = 0;
}
</pre>
</blockquote>
This sets the initial population of species <code>A1</code>
to 100, and the initial population of species <code>A2</code>
through <code>A5</code> to zero.
</p>
<p>
In defining a loop, note that the &quot;<code>start</code>&quot; and
&quot;<code>stop</code>&quot; keywords are followed by numeric elements.
This means that they can be simple numeric literals (as shown above),
or mathematical expressions, as shown here:
<blockquote>
<pre>
k = 10;
loop "i": start 1, stop [k + 2]
{
  reaction_$[i], A$[i] -&gt; A$[i+1], 1.0;
}
</pre>
</blockquote>
In the above example, the loop index <code>i</code> would iterate 
over the range of integer values from 1 to 12, inclusive.
</p>

</isb:docsubsection>

<isb:docsubsection name="Example CCMDL model definition file" label="examplefile">
<p>
The following example illustrates a complete CCMDL model definition file:
<blockquote>
<pre>
minBases                 = 45;
codingRegionLengthBases  = 1000.0;
transcriptionRate        = 1.0;
abortProbPerBase         = 0.005;

# polymerization complex moving one base along the template
loop "i": start 1, stop [minBases-1]
{
PCOM_moves_one_base_at_base_$[i], PCOM_plus_DNA_at_base_$[i] -&gt; 
                                  PCOM_plus_DNA_at_base_$[i+1],  [transcriptionRate];
}

# polymerization complex moving past the "minBases" threshold
PCOM_passing_threshold, PCOM_plus_DNA_at_base_$[minBases] -&gt; 
                        DNA_plus_TFC + PCOM_plus_DNA_past_base_$[minBases],  [transcriptionRate];

# recruitment of PolII
PolII_recruitment,    DNA_plus_TFC + PolII -&gt; PCOM_plus_DNA_at_base_1,   1.0;
PolII_derecruitment,  PCOM_plus_DNA_at_base_1 -&gt; DNA_plus_TFC + PolII,   0.1;

# completion of transcription process
transcription_completed,   PCOM_plus_DNA_past_base_$[minBases] -&gt; 
                           PolII + mRNA_product_complete, 
                           [transcriptionRate/codingRegionLengthBases];

# aborting of transcription within the first "minBases" bases
loop "i": start 2, stop [minBases]
{
abort_at_base_$[i],   PCOM_plus_DNA_at_base_$[i] -&gt; 
                      DNA_plus_TFC + PolII + mRNA_product_fragment, [abortProbPerBase];
}

# aborting of late-state transcription
aborting_past_threshold,  PCOM_plus_DNA_past_base_$[minBases] -&gt; 
                      PolII + mRNA_product_fragment, 
                      [transcriptionRate * abortProbPerBase / codingRegionLengthBases];

# transcription factor A binding to empty DNA template
TFA_binding_DNA,            DNA + TFA -&gt; DNA_plus_TFA,                  1.0;
TFA_debinding_DNA,          DNA_plus_TFA -&gt; DNA + TFA,                  0.1;

# transcription factor B binding to empty DNA template
TFB_binding_DNA,            DNA + TFB -&gt; DNA_plus_TFB,                  1.0;
TFB_debinding_DNA,          DNA_plus_TFB -&gt; DNA + TFB,                  0.1;

# transcription factor A binding to DNA template (where B is already bound)
TFA_binding_DNA_plus_TFB,   DNA_plus_TFB + TFA -&gt; DNA_plus_TFC,         1.0;
TFA_debinding_DNA_plus_TFB, DNA_plus_TFC -&gt; DNA_plus_TFB + TFA,         0.1;

# transcription factor B binding to DNA template (where A is already bound)
TFB_binding_DNA_plus_TFA,   DNA_plus_TFA + TFB -&gt; DNA_plus_TFC,         1.0;
TFB_debinding_DNA_plus_TFA, DNA_plus_TFC -&gt; DNA_plus_TFA + TFB,         0.1;

# setting the initial populations for the chemical species in the model:
TFA                                   = 5;
TFB                                   = 5;
DNA_plus_TFA                          = 0;
DNA_plus_TFB                          = 0;
DNA_plus_TFC                          = 0;
DNA                                   = 1;
PCOM_plus_DNA_past_base_$[minBases]   = 0;
mRNA_product_complete                 = 0;
mRNA_product_fragment                 = 0;
PolII                                 = 5;

loop "i": start 1, stop [minBases]
{
        PCOM_plus_DNA_at_base_$[i]    = 0;
}
</pre>
</blockquote>
This model definition file defines a very simple model of transcription.
The model contains two transcription factors, <code>TFA</code> and 
<code>TFB</code>.  
</p>
</isb:docsubsection>

<isb:docsubsection name="Action Performing Statements" label="actionperformingstatements">

<p>
In the CCMDL, a number of action-performing statements are
permitted in a model definition file.  These statements are 
intended for use with the command-line &appName; program, in
order to run simulations, export to different file formats, etc.  
The graphical &appName; program actually ignores any of the 
action-performing statements that appear in a model definition
file.  Most users will probably use the graphical user interface,
rather than the action-performing statements described herein.  
The action-performing statements are documented here for 
completeness, and to facilitate use of the &appName; system
in a command-line mode of operation.
</p>
<p>
This section documents the various action-performing
statements available in the CCMDL language.  In a model
definition file, the action-performing statement should be
put after all of the model-definition statements.  Typically
the action-performing statement(s) are put at the end of the
model definition file.  The list of allowed action-performing
statements in the CCMDL are:
</p>
<p>
<dl>
<dt><code>print: model;</code></dt>
<dd>prints out a string (human-readable) representation of the
default model, to standard output (the console)
<p />
</dd>
<dt><code>print: speciesPopulations;</code></dt>
<dd>prints out a string (human-readable) representation of the
default species populations collection, to standard output
(the console)
<p />
</dd>
<dt><code>export: modelInstance;</code></dt>
<dd>exports the default model and species populations collection
to the <a href="#sbml">Systems Biology Markup Language</a>,
to standard output (the console).
Optionally, one may add an element to specify an output file,
as shown here:
<blockquote>
<pre>
export: modelInstance, outputFile "myFile-sbml.xml";
</pre>
</blockquote>
where the quotes are mandatory, and the text inside the
quotes is the name of the file to which the model should
be exported.  Optionally, one may add an element to specify
an <a href="#exporterplugins">exporter alias</a>, as shown here:
<blockquote>
<pre>
export: modelInstance, outputFile "myFile&cmdlExtension;", exporter "command-language";
</pre>
</blockquote>
The above example instructs the &appName; system to export
the model instance in the <a href="#cmdl">CMDL</a> language.
<p />
</dd>
<dt><code>simulate:</code></dt>
<dd>
<p>
Runs a simulation of the reaction kinetics of the default 
<a href="#modelinstances">model instance</a>.  This default
model instance contains the default <a href="#models">model</a>
and the default <a href="#speciespopulations">species populations
collection</a>, the latter specifying the initial species populations
for the simulation.  Required parameters are:
     <dl>
     <dt><code>stopTime <em>nnnnn</em></code></dt>
     <dd>The stop time of the simulation, where <code>nnnnn</code>
is a floating-point number.  The units of the stop time are the
same as the units of the reciprocal of the reaction parameters
defined for the chemical reactions in the model,
which is normally seconds.</dd>
     <dt><code>viewSpecies ("s1" "s2" ...)</code></dt>
     <dd>Specifies the species whose populations are to be 
taken as the output of the simulation.  Double-quotes
are required around each species name.  Note that the
list of species is delimited with whitespace, not commas.
The list of species is initiated and terminated with
parentheses.</dd>
     </dl>
</p>
<p>
There are a number of optional parameters for the 
<code>simulate</code> statement:
     <dl>
     <dt><code>startTime <em>nnnnn</em></code></dt>
     <dd>Specifies the starting time of the simulation, where
<code>nnnnn</code> is a floating-point number.  The units of
the start time are the same as the units of the reciprocal
of the reaction parameters defined for the chemical reactions
in the model, which is normally seconds.  The default value
for this starting time is zero.  It is rarely necessary to
specify this parameter; the only case where it might be needed
is with reaction rate expressions or species population
expressions that explicitly involve the <code>time</code> symbol.
     </dd>
     <dt><code>numTimePoints <em>nnnnn</em></code></dt>
     <dd>This important parameter specifies the number of
&quot;snapshots&quot; of the species populations are to
be recorded over the course of the simulation.  The total
duration of the simulation (<code>stopTime</code> minus
<code>startTime</code>) is divided into <code>numTimePoints</code>
sub-intervals.  After each time subinterval has elapsed during
the course of the simulation, a &quot;snapshot&quot;
of the species populations (for those species specified with the
<code>viewSpecies</code> parameter defined above) is recorded.
The default value for this parameter is 100.  The parameter value
must be an integer greater than zero.</dd>
     <dt><code>output [print|store]</code></dt>
     <dd>This parameter defines what should be done with the
&quot;snapshots&quot; of the species populations, that are
the &quot;output&quot; of the simulation.  The allowed
values are &quot;<code>store</code>&quot; and
&quot;<code>print</code>&quot;.  
         <dl>
         <dt><code>print</code></dt>
         <dd>this
value is the default, and means that the output should be
printed to &quot;standard output&quot;, in comma-separated
value format (a format suitable for loading into Microsoft 
Excel or a similar spreadsheet application).</dd>
         <dt><code>store</code></dt>
         <dd>The value
&quot;<code>store</code>&quot; means that the output
should be stored as a variable.  This is mostly useful
when chaining together multiple simulations with 
different reaction kinetics or simulators.  The output
from one simulation can be stored, and subsequently
used as the input to another simulation.  When you specify
&quot;<code>store</code>&quot; as the <code>output</code>
type of the <code>simulate</code> command, it is required that
you also specify the &quot;<code>storeName</code>&quot;
parameter, which is defined below.</dd>
         </dl></dd>
     <dt><code>storeName &quot;myName&quot;</code></dt>
     <dd>
This parameter is required only when specifying an
output type of &quot;<code>store</code>&quot; (defined
above).  It specifies the variable name under which the
output species populations should be stored.  This is
useful for chaining together multiple simulations, 
in which the output of one simulation becomes the
input for a subsequent simulation, within the invocation
of a single model definition script.
     </dd>
     <dt><code>ensembleSize <em>nnnnn</em></code></dt>
     <dd>
This parameter specifies that <em>nnnnn</em> separate
simulations should be run with the same parameters, and
the resulting &quot;snapshot&quot; values for species
populations over time, should be averaged for each time
point and species, over the &quot;ensemble&quot; of
realizations of the simulation.  This essentially implements
an ensemble average of time-series species populations.
The parameter <code>nnnnn</code> is required to be an
integer greater than zero.  The species population
values that are printed will be floating-point numbers,
even for floating species (which can only have integer
population values within a given realization of the ensemble),
due to the averaging process.  The &quot;<code>ensembleSize</code>&quot;
parameter may <em>not</em> be specified with the
&quot;<code>output store</code>&quot; parameter, because
floating-point values may not be stored in a 
<a href="#speciespopulations">species populations collection</a>
object, for floating species.
    </dd>
    <dt><code>outputFile &quot;myFile.csv&quot;</code></dt>
    <dd>Species the file name to which the simulation output
should be saved.  The &quot;<code>output print</code>&quot;
output type should be specified, if this parameter is specified.
The output is saved in comma-separated-value (CSV) format.  If
you specify the file extension (&quot;<code>.csv</code>&quot;),
it should enable the output file to be opened in the default
spreadsheet application for your desktop computer's graphical
windowing system (e.g., GNOME or Windows).</dd>
    <dt><code>debug <em>nnnnn</em></code></dt>
    <dd>Specifies an integer &quot;debug level&quot; for the
simulator.  The higher the debug level specified, the more
verbose the debugging information that will be displayed
by the simulator.  This is useful for &quot;debugging&quot;
simulations that appear to be malfunctioning or giving 
unexpected reaction kinetics.  Possible values are:
      <ol start="0">
        <li><code>NONE</code>: no debugging output</li>
        <li><code>LOW</code>: minimal debugging output (number of iterations, start and stop of simulation)</li>
        <li><code>MEDIUM</code>: medium level of debugging output</li>
        <li><code>HIGH</code>: high level of debugging output (each reaction step is printed)</li>
        <li><code>EXTREME</code>:  extreme level of debugging output</li>
      </ol>
The amount and type of debugging information that will 
be printed will vary with the type of 
<a href="#simplugins">simulator plug-in</a> that
is being used.  This option should be used carefully, as it
can severely degrade the efficiency of the simulation engine,
and it can generate voluminous output that must be buffered
and printed to the &quot;standard error&quot; stream (console).
The default value of this parameter is 0 (no debugging output),
which is (by far) the most efficient in terms of performance.
    </dd>
    <dt><code>simulator &quot;gillespie&quot;</code></dt>
    <dd>Specifies the <a href="simplugins">simulator plug-in</a> 
to use for the simulation.
The default is &quot;<code>gillespie</code>&quot;, the Gillespie
simulator plug-in.</dd>
    </dl>
    </p>
    <p>
The &quot;<code>simulate</code>&quot; statement is usually
placed at the end of a model definition file, after all of the
reaction definitions.  The following is an example of a simulate 
statement:  
<blockquote>
<pre>
simulate:  startTime 0, stopTime 500.0, numTimePoints 100, debug 1,
           viewSpecies ("G3D_G80D" "G4_RNA" "G80_RNA" "G3_RNA" "G4D_free" "G80D_free" "G3D_free"),
           output store, storeName "final", simulator "gillespie";
</pre>
</blockquote>
The above example runs a simulation for <code>500</code> seconds, and
stores the output under variable name &quot;<code>final</code>&quot;.
    </p>
    <p>
In order to run a simulation with a species populations collection
other than the default species populations collection, you must use
the form of the simulate statement from the CMDL, in which the
model name and species populations collection name are explicitly
specified.  An example is shown here:
<blockquote>
<pre>
simulate "myModel": speciesPopulations "final", stopTime 500,
                    viewSpecies ("G3D_G80D" "G4_RNA");
</pre>
</blockquote>
Note that &quot;<code>myModel</code>&quot; is the special name 
of the default model in the CCMDL.  In the CMDL, all models
are explicitly named, and the model name of the model to be
simulated is always specified after the &quot;<code>simulate</code>&quot;
statement.
    </p>
</dd>       
</dl>
</p>
</isb:docsubsection>

</isb:docsection>



<!-- ========== CMDL ========== -->

<isb:docsection name="Chemical Model Definition Language (CMDL)" label="cmdl">

This section describes the Chemical Model Definition Language.

<isb:docsubsection name="Preliminaries" label="cmdl-preliminaries">
The CMDL is a scripting language designed for defining models of
systems of interacting chemical species.  A <a href="#modelinstances">model instance</a>
is defined using one (or possibly more) <b>model definition files</b>.  A single
model definition file is loaded, and may <a href="#fileinclusion">include</a>
other model definition files.  The model definition file contains a sequence of
<a href="#statements">statements</a>, each of which has the following structure:
<blockquote>
<pre>
keyword "statement-name": element1, element2, ... elementN;
</pre>
</blockquote>
where <code>keyword</code> is a keyword that defines the type
of statement, <code>statement-name</code> is a string that
gives a name or operand for the statement, and there are zero
or more <a href="#elements">elements</a> that define various
attributes of the statement.  An example statement is shown here:
<blockquote>
<pre>
species "s1": compartment "c1";
</pre>
</blockquote>
In the above statement, the keyword is <code>species</code>, the
statement name is &quot;<code>s1</code>&quot;, and there is a single
element <code>compartment "c1"</code>.  The colon always separates
the statement from any elements.  In a statement with no elements, the colon
is omitted.  The statement always ends with a semicolon.  Note the use of
double-quotation marks.  In the CMDL, quotation marks are used to 
delimit <a href="#stringelements">string elements</a>.  
<p />
Here is an example statement that does not contain any elements:
<blockquote>
<pre>
printModel "m1";
</pre>
</blockquote>
In this case, the keyword is <code>printModel</code> and the operand
is &quot;<code>m1</code>&quot;.  This statement causes the model
&quot;<code>m1</code>&quot; to be printed to standard output (the console).
<p />
Please note that all statements in the CMDL are strictly
<a href="#casesensitive">case-sensitive</a>.
This means that using the keyword <code>printmodel</code> instead of the
correct form <code>printModel</code> would be a syntax error.
<p />
In the CMDL, there are two <b>classes</b> of statements: 
<a href="#cmdl-definitionstatements"><b>definition statements</b></a> and 
<a href="#cmdl-actionperforming"><b>action-performing statements</b></a>.
The definition statements are declarative in nature, and cause objects to
be created within the scripting runtime (scripting engine).  The
action-performing statements cause actions to be executed on the
objects previously defined with definition statements.  Both types
of statements follow the above-described statement format (keyword, name/operand,
colon, elements, semicolon).  Of the above two examples, the 
<code>species</code> statement is an example of a definition statement, and
the <code>printModel</code> statement is an example of an action-performing
statement.  The action-performing statements are intended only for use with
the command-line interface to the scripting engine.
</isb:docsubsection>

<isb:docsubsection name="Definition Statements" label="cmdl-definitionstatements">
This section defines all definition statements in the CMDL.  
The statement types appear in roughly the order in which they
might appear in a typical model definition file:
<dl>

<dt><b><code>compartment</code></b></dt>
<dd>
The <code>compartment</code> keyword defines a <a href="#compartments">compartment</a>.
Unlike the <a href="#ccmdl">CCMDL</a>, in the CMDL a compartment must be explicitly 
defined.  There is no &quot;default&quot; compartment automatically defined by the
scripting engine.  The elements for this keyword are:
  <p />
  <dl>
    <dt><code>[name]</code></dt>
    <dd>The name of the compartment is supplied as a string, immediately after the 
<code>compartment</code> keyword.  Must be a valid 
<a href="#symbols">symbol name</a>. [required]<p /></dd>

    <dt><code>volume</code></dt>
    <dd>Numeric element that specifies the volume of the compartment, in liters.  The
default value is 1.0.  [optional].<p /></dd>
  </dl>
The following example shows a sample compartment definition statement:
<blockquote>
<pre>
compartment "c1": volume 1.0;
</pre>
</blockquote>
Because the default compartment volume is 1.0, the above statement could
also be written as:
<blockquote>
<pre>
compartment "c1";
</pre>
</blockquote>
<p /></dd>

<dt><b><code>species</code></b></dt>
<dd>
The <code>species</code> keyword defines a chemical <a href="#species">species</a>.
Unlike the <a href="#ccmdl">CCMDL</a>, in the CMDL each species must be explicitly
defined by a separate <code>species</code> statement.  Species are not implicitly
defined by their participation in one or more chemical reactions, in the CMDL.
The elements for this keyword are:
  <p />
  <dl>

    <dt><code>[name]</code></dt>
    <dd>The name of the species is supplied as a string, immediately after the
<code>species</code> keyword.  Must be a valid 
<a href="#symbols">symbol name</a>. [required]<p /></dd>

    <dt><code>compartment</code></dt>
    <dd>String element that specifies the name of the <a href="#compartments">compartment</a>
with which the species is associated.  The compartment must have been previously defined.
 [required]<p /></dd>

    <dt><code>speciesType</code></dt>
    <dd>Modifier element that specifies whether the species is of type &quot;<code>floating</code>&quot;
or &quot;<code>boundary</code>&quot;.  The default is &quot;<code>floating</code>&quot;.  [optional].
    <p /></dd>

  </dl>
An example species definition is shown here:
<blockquote>
<pre>
species "s1": compartment "c1";
</pre>
</blockquote>
defining species <code>s1</code> as a floating species in the compartment <code>c1</code>.
Note that the above could also have been written:
<blockquote>
<pre>
species "s1": compartment "c1", speciesType floating;
</pre>
</blockquote>
The two above statements are equivalent because &quot;<code>floating</code>&quot;
is the default for the <code>speciesType</code> element.
The following example shows a boundary species definition:
<blockquote>
<pre>
species "s2": compartment "c1", speciesType boundary;
</pre>
</blockquote>
<p /></dd>

<dt><b><code>parameter</code></b></dt>
<dd>
The <code>parameter</code> keyword defines a <a href="#parameters">parameter</a>.  
The elements for this keyword are:
  <p />
  <dl>
    <dt><code>[name]</code></dt>
    <dd>The name of the parameter is supplied as a string, immediately after the
<code>parameter</code> keyword.  Must be a valid 
<a href="#symbols">symbol name</a>. [required]<p /></dd>

    <dt><code>value</code></dt>
    <dd>Numeric element that specifies the value of the parameter.  [required]<p /></dd>

    <dt><code>reactions</code></dt>
    <dd>List element that specifies the names of one or more reactions for which this
parameter is to be defined in the <b>local namespace</b>.  By default, a parameter
is defined in the <b>global namespace</b>, if this element is omitted. Each item
in the list must be the string name of a reaction that has been previously defined. [optional]<p /></dd>
  </dl>
<p /></dd>

<dt><b><code>reaction</code></b></dt>
<dd>
The <code>reaction</code> keyword defines a chemical <a href="#reactions">reaction</a>.
The elements for this keyword are:
  <p />
  <dl>
    <dt><code>[name]</code></dt>
    <dd>The name of the reaction is supplied as a string, immediately after the
<code>reaction</code> keyword..  Must be a valid <a href="#symbols">symbol name</a>. [required]
    <p /></dd>

    <dt><code>rate</code></dt>
    <dd>A string or numeric element that defines the <a href="#reactionrates">reaction rate</a>.  
If the reaction rate is
specified as a numeric element, the reaction rate is computed with the built-in method,
with the value of this element being used as the reaction rate parameter.  If the reaction
rate is specified as a string element, the string is interpreted as a
<a href="#expressions">mathematical expression</a> representing the formula to
compute the reaction rate. [required]<p /></dd>

    <dt><code>reactants</code></dt>
    <dd>A list element that specifies the list of reactant species participating
in the reaction.  This list may have zero elements, if there are no reactant species
for the reaction (i.e., you wish to model spontaneous generation of product species).
[required]<p /></dd>

    <dt><code>products</code></dt>
    <dd>A list element that specifies the list of product species participating
in the reaction.  This list may have zero elements, if there are no product species
for the reaction (i.e., you wish to model the decay of reactant species into nothing).
[required]<p /></dd>

  </dl>
The following example shows a sample reaction definition statement:
<blockquote>
<pre>
reaction "r1": reactants ("s1" "s2"), products ("s3" "s4"), rate 1.0;
</pre>
</blockquote>
This defines a chemical reaction <code>r1</code> with reactant species
<code>s1</code> and <code>s2</code>, and product species <code>s3</code>
and <code>s4</code>.  The reaction rate method is the built-in (default)
rate computation method, with a reaction rate parameter of 1.0.  An example
of a reaction definition with a custom reaction rate expression is shown here:
<blockquote>
<pre>
reaction "r1": reactants ("s1" "s2"), products ("s3" "s4"), rate "7.0 * s1 * s2";
</pre>
</blockquote>
In the above definition, the reaction rate is defined to be the mathematical
expression &quot;<code>7.0 * s1 * s2</code>&quot;, which will be evaluated 
by the simulation engine each time the reaction rate needs to be computed.
<p /></dd>

<dt><b><code>model</code></b></dt>
<dd>
The <code>model</code> keyword defines a <a href="#models">model</a> of a system
of chemical species, compartment, and reactions.  Not all reactions for a model
need to be specified in the initial model definition.  Reactions may be added later
using the <code>addReactionToModel</code> keyword. 
Not all parameters for a model
need to be specified in the initial model definition.  Parameters may be added later
using the <code>addParameterToModel</code> keyword.  The elements for this keyword are:
  <p />
  <dl>
    <dt><code>[name]</code></dt>
    <dd>The name of the model is supplied as a string, immediately after the
<code>model</code> keyword.  Must be a valid <a href="#symbols">symbol name</a>. [required]
    <p /></dd>
    
    <dt><code>reactions</code></dt>
    <dd>A list element that specifies the list of 
<a href="#reactions">reactions</a> to be included in this model.  Each item in the list
is a string specifying a reaction name.  Each reaction must have been previously defined.
Models get their list of species and compartments
through the reactions specified with this element. [optional]<p /></dd>

    <dt><code>speciesMode</code></dt>
    <dd>A modifier element that specifies the <a href="#reactionratespeciesmode">
reaction rate species mode</a> of the model.  The possible values are 
&quot;<code>molecules</code>&quot; and 
&quot;<code>concentration</code>&quot;.  The default is &quot;<code>molecules</code>&quot;,
if this element is not specified. [optional]<p /></dd>

    <dt><code>submodels</code></dt>
    <dd>EXPERIMENTAL feature.  A list element that defines a list of models that
should be subsumed into the model being defined.  All reactions from a sub model are
included in the parent model.  Each item on the list is a string specifying a name
of a model to be included as a submodel.  Each submodel must have been previously
defined.  The default is no submodel inclusion, this element is not specified.  
[optional]<p /></dd>

    <dt><code>parameters</code></dt>
    <dd>A list element that specifies the list of <a href="#parameters">parameters</a> 
that are to be associated with this model.  Each item in the list is a string
specifying the name of a parameter.  The parameter must have been previously defined.
This list may have zero elements.  Parameters specified using this element are
in the &quot;global namespace&quot;, and can be referenced in any reaction rate
or species population expression within the context of the model. [optional]<p /></dd>
  </dl>
The following example shows a sample model definition:
<blockquote>
<pre>
model "m1": reactions ("r1" "r2"), parameters ("p1" "p2");
</pre>
</blockquote>
which defines model <code>m1</code> to contain reactions 
<code>r1</code> and <code>r2</code>, and parameter
<code>p1</code> and <code>p2</code>.  The reaction rate
species mode of the model is &quot;<code>molecules</code>&quot;.
Therefore the above definition is equivalent to:
<blockquote>
<pre>
model "m1": reactions ("r1" "r2"), parameters ("p1" "p2"), speciesMode molecules;
</pre>
</blockquote>
To define the same model with a reaction rate species mode of &quot;<code>concentration</code>&quot;,
one would write:
<blockquote>
<pre>
model "m1": reactions ("r1" "r2"), parameters ("p1" "p2"), speciesMode concentration;
</pre>
</blockquote>
<p /></dd>

<dt><b><code>speciesPopulations</code></b></dt>
<dd>
The <code>speciesPopulations</code> keyword defines a 
<a href="#speciespopulations">species populations collection</a>, which
is used to specify initial conditions for a simulation.  Once a species population
collection has been defined, additional species may be subsequently added to 
the collection using the <code>addToSpeciesPopulations</code> keyword.
The elements for this keyword are:
  <p />
  <dl>
    <dt><code>[name]</code></dt>
    <dd>The name of the species population collection is supplied as a string, immediately after the
<code>speciesPopulations</code> keyword.  Must be a valid <a href="#symbols">symbol name</a>. 
[required]<p /></dd>

    <dt><code>speciesList</code></dt>
    <dd>A list element that defines the list of species to be included in the
collection.  This should include all species in the model for which this
species population collection is to serve as the initial data specification.
Each item in the list is a string specifying a species name.  Each species must
have been previously defined.  It is permissible for this list to have zero elements. 
[required]<p /></dd>

    <dt><code>populations</code></dt>
    <dd>A list element that defines the population values (or expressions) for
all species in the collection.  The number of items in this list must be
identical to the number of elements in the <code>speciesList</code> list element.
Each item in the list is either a numeric element specifying an integer population
value, or a string specifying an expression that will be used to compute the population
value by the simulation engine.  The <em>i</em>th item in this list specifies the
population value for the <em>i</em>th species in the <code>speciesList</code> list. 
[required]<p /></dd>
  </dl>
Some examples of using this keyword are:
  <blockquote>
  <pre>
speciesPopulation "initialData1": speciesList ("s1" "s2" "s3"), populations (250 100 175);
  </pre>
  </blockquote>
defining a collection for the three species <code>s1</code>, <code>s2</code>, and
<code>s3</code>, and the following example:
  <blockquote>
  <pre>
speciesPopulation "initialData2": speciesList ("s1" "s2" "s3"), populations (250 100 "3.0 * time");
  </pre>
  </blockquote>
defining the same collection, but with a custom expression for the population
of species <code>s3</code>.
<p /></dd>

<dt><b><code>addToSpeciesPopulations</code></b></dt>
<dd>
The <code>addToSpeciesPopulations</code> keyword adds a previously defined 
<a href="#species">species</a> to
a previously defined 
<a href="#speciespopulations">species populations collection</a>, 
with a specified population value.  
If the species already exists in the species populations collection, the previous
population value is replaced with the new population value.  This keyword is useful 
within loops, to define the initial species population of a vector of species, such
as species S1 through SN (where N is an integer).  The elements for this keyword are:
  <p />
  <dl>
    <dt><code>[speciesPopulations]</code></dt>
    <dd>
The species populations collection name must be specified immediately after the
<code>addToSpeciesPopulations</code> keyword.  This is a string element that 
must refer to a previously defined species populations collection. [required]
    <p />
    </dd>

    <dt><code>species</code></dt>
    <dd>A string element that specifies the name of the species to be added to the
species population collection.  The species must have been previously defined. [required]
    <p />
    </dd>

    <dt><code>population</code></dt>
    <dd>A string or numeric element that specifies the population of the species to be
added to the species population collection.  If the element is a number, it must be
an integer; it specifies the population value directly.  If the element is a string,
the string is interpreted as a mathematical expression that will be used by the simulation
engine to compute the species population, each time the species population value is needed.
[required].
    <p />
    </dd>
  </dl>
The following example shows a sample use of the <code>addToSpeciesPopulations</code> keyword:
<blockquote>
<pre>
addToSpeciesPopulations "sp1": species "s1", value 100;
</pre>
</blockquote>
The following example uses a population expression instead of a numeric value:
<blockquote>
<pre>
addToSpeciesPopulations "sp1": species "s1", value "100 + 10 * time";
</pre>
</blockquote>
<p />
</dd>

<dt><b><code>addReactionToModel</code></b></dt>

<dd>
The <code>addReactionToModel</code> keyword is used to add a 
<a href="#reactions">reaction</a> to a <a href="#models">model</a>.
Both the reaction and the model must have been previously defined.
If the reaction has been previously added to the model, this statement
will have no effect. This keyword is useful within loops, to add
all reactions within a vector of reactions R1 through RN (where N is
an integer) to a model.  The elements for this keyword are:
  <p />
  <dl>
    <dt><code>[model]</code></dt>
    <dd>
The model name must be specified immediately after the
<code>addReactionToModel</code> keyword.  This is a string element that 
must refer to a previously defined model. [required]
    <p />
    </dd>

    <dt><code>reaction</code></dt>
    <dd>
This is a string element that specifies the name of the reaction to
add to the model.  The reaction must have been previously defined. [required]
    <p />
    </dd>
  </dl>
An example statement using the <code>addReactionToModel</code> is shown here:
<blockquote>
<pre>
addReactionToModel "m1": reaction "r1";
</pre>
</blockquote>
which adds reaction <code>r1</code> to model <code>m1</code>.
<p />
</dd>

<dt><b><code>addParameterToModel</code></b></dt>

<dd>
The <code>addParameterToModel</code> keyword is used to add a 
<a href="#parameters">parameter</a> to a <a href="#models">model</a>.
Both the parameter and the model must have been previously defined.
If the parameter has been previously added to the model, this statement
will have no effect. This keyword is useful within loops, to add
all parameters within a vector of parameters R1 through RN (where N is
an integer) to a model.  The elements for this keyword are:
  <p />
  <dl>
    <dt><code>[model]</code></dt>
    <dd>
The model name must be specified immediately after the
<code>addParameterToModel</code> keyword.  This is a string element that 
must refer to a previously defined model. [required]
    <p />
    </dd>

    <dt><code>parameter</code></dt>
    <dd>
This is a string element that specifies the name of the parameter to
add to the model.  The parameter must have been previously defined. [required]
    <p />
    </dd>
  </dl>
An example statement using the <code>addParameterToModel</code> is shown here:
<blockquote>
<pre>
addParameterToModel "m1": parameter "r1";
</pre>
</blockquote>
which adds parameter <code>r1</code> to model <code>m1</code>.
<p />
</dd>
</dl>

</isb:docsubsection>

<isb:docsubsection name="Example CMDL model definition file" label="cmdl-samplefile">
The following is a sample model definition file in the CMDL language.
<blockquote>
<pre>
compartment "univ": volume 1.0;
species "DNA3": compartment "univ", speciesType floating;
species "DNA4": compartment "univ", speciesType floating;
species "DNA80": compartment "univ", speciesType floating;
species "G3D_G80D": compartment "univ", speciesType floating;
species "G3D_free": compartment "univ", speciesType floating;
species "G3_RNA": compartment "univ", speciesType floating;
species "G3_protein": compartment "univ", speciesType floating;
species "G4D_DNA3": compartment "univ", speciesType floating;
species "G4D_DNA4": compartment "univ", speciesType floating;
species "G4D_DNA80": compartment "univ", speciesType floating;
species "G4D_free": compartment "univ", speciesType floating;
species "G4_RNA": compartment "univ", speciesType floating;
species "G4_protein": compartment "univ", speciesType floating;
species "G80D_G4D_DNA3": compartment "univ", speciesType floating;
species "G80D_G4D_DNA4": compartment "univ", speciesType floating;
species "G80D_G4D_DNA80": compartment "univ", speciesType floating;
species "G80D_free": compartment "univ", speciesType floating;
species "G80_RNA": compartment "univ", speciesType floating;
species "G80_protein": compartment "univ", speciesType floating;
species "galactose": compartment "univ", speciesType boundary;
reaction "G4_dimer_binding_at_DNA4": products ("G4D_DNA4"), rate 1.0, reactants ("G4D_free" "DNA4");
reaction "G4_dimer_debinding_at_DNA4": products ("G4D_free" "DNA4"), rate 0.1, reactants ("G4D_DNA4");
reaction "G80_dimer_binding_at_DNA4": products ("G80D_G4D_DNA4"), rate 1.0, reactants ("G80D_free" "G4D_DNA4");
reaction "G80_dimer_debinding_at_DNA4": products ("G80D_free" "G4D_DNA4"), rate 0.1, reactants ("G80D_G4D_DNA4");
reaction "G4_dimer_binding_at_DNA80": products ("G4D_DNA80"), rate 1.0, reactants ("G4D_free" "DNA80");
reaction "G4_dimer_debinding_at_DNA80": products ("G4D_free" "DNA80"), rate 0.1, reactants ("G4D_DNA80");
reaction "G80_dimer_binding_at_DNA80": products ("G80D_G4D_DNA80"), rate 1.0, reactants ("G80D_free" "G4D_DNA80");
reaction "G80_dimer_debinding_at_DNA80": products ("G80D_free" "G4D_DNA80"), rate 0.1, reactants ("G80D_G4D_DNA80");
reaction "G4_dimer_binding_at_DNA3": products ("G4D_DNA3"), rate 1.0, reactants ("DNA3" "G4D_free");
reaction "G4_dimer_debinding_at_DNA3": products ("DNA3" "G4D_free"), rate 0.1, reactants ("G4D_DNA3");
reaction "G80_dimer_binding_at_DNA3": products ("G80D_G4D_DNA3"), rate 1.0, reactants ("G4D_DNA3" "G80D_free");
reaction "G80_dimer_debinding_at_DNA3": products ("G4D_DNA3" "G80D_free"), rate 0.1, reactants ("G80D_G4D_DNA3");
reaction "G3D_G80D_complexing": products ("G3D_G80D"), rate 1.0, reactants ("G80D_free" "G3D_free");
reaction "G3D_G80D_decomplexing": products ("G80D_free" "G3D_free"), rate 0.1, reactants ("G3D_G80D");
reaction "G4_transcription": products ("G4_RNA" "G4D_DNA4"), rate 1.0, reactants ("G4D_DNA4");
reaction "G80_transcription": products ("G80_RNA" "G4D_DNA80"), rate 1.0, reactants ("G4D_DNA80");
reaction "G3_transcription": products ("G4D_DNA3" "G3_RNA" "galactose"), rate 1.0, reactants ("G4D_DNA3" "galactose");
reaction "G4_translation": products ("G4_protein"), rate 0.1, reactants ("G4_RNA");
reaction "G80_translation": products ("G80_protein"), rate 0.05, reactants ("G80_RNA");
reaction "G3_translation": products ("G3_protein"), rate 0.05, reactants ("G3_RNA");
reaction "G4_dimerization": products ("G4D_free"), rate 1.0, reactants ("G4_protein" "G4_protein");
reaction "G4_dedimerization": products ("G4_protein" "G4_protein"), rate 0.1, reactants ("G4D_free");
reaction "G80_dimerization": products ("G80D_free"), rate 1.0, reactants ("G80_protein" "G80_protein");
reaction "G80_dedimerization": products ("G80_protein" "G80_protein"), rate 0.1, reactants ("G80D_free");
reaction "G3_dimerization": products ("G3D_free"), rate 1.0, reactants ("G3_protein" "G3_protein");
reaction "G3_dedimerization": products ("G3_protein" "G3_protein"), rate 0.1, reactants ("G3D_free");
model "myModel": reactions ("G4_dimer_binding_at_DNA4" "G4_dimer_debinding_at_DNA4" 
                 "G80_dimer_binding_at_DNA4" "G80_dimer_debinding_at_DNA4" 
                 "G4_dimer_binding_at_DNA80" "G4_dimer_debinding_at_DNA80" 
                 "G80_dimer_binding_at_DNA80" "G80_dimer_debinding_at_DNA80" 
                 "G4_dimer_binding_at_DNA3" "G4_dimer_debinding_at_DNA3" 
                 "G80_dimer_binding_at_DNA3" "G80_dimer_debinding_at_DNA3" 
                 "G3D_G80D_complexing" "G3D_G80D_decomplexing" "G4_transcription" 
                 "G80_transcription" "G3_transcription" "G4_translation" 
                 "G80_translation" "G3_translation" "G4_dimerization" 
                 "G4_dedimerization" "G80_dimerization" "G80_dedimerization" 
                 "G3_dimerization" "G3_dedimerization"), speciesMode molecules;
speciesPopulations "sp": populations (1.0 1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
                                      10.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0), 
                         speciesList ("DNA3" "DNA4" "DNA80" "G3D_G80D" "G3D_free" "G3_RNA" 
                                      "G3_protein" "G4D_DNA3" "G4D_DNA4" "G4D_DNA80" "G4D_free" 
                                      "G4_RNA" "G4_protein" "G80D_G4D_DNA3" "G80D_G4D_DNA4" 
                                      "G80D_G4D_DNA80" "G80D_free" "G80_RNA" "G80_protein" "galactose");
</pre>
</blockquote>
</isb:docsubsection>

<isb:docsubsection name="Action Performing Statements" label="cmdl-actionperforming">
This section defines all action-performing statements in the CMDL.  Note
that the action-performing statements available in the CMDL are intended
only for use with the command-line interface to the scripting engine.
When a model definition file is loaded by the GUI application, action-performing 
statements appearing in the file are ignored.  The statements available are as
follows:
<dl>

<dt><b><code>exportModelInstance</code></b></dt>
<dd>
The <code>exportModelInstance</code> keyword exports the specified
model and species population collection (which together make up a model instance),
to the specified file format.  

  <dl>
    <dt><code>[model]</code></dt>
    <dd>
A string specifying the name of the model to be exported is required
immediately after the <code>exportModelInstance</code> keyword.  The
model must have been previously defined. [required]
    <p />
    </dd>

    <dt><code>speciesPopulations</code></dt>
    <dd>
A string element specifying the name of the species populations collection
to be exported along with the model.  The species populations collection
must have been previously defined.  [required]
    <p />
    </dd>

    <dt><code>outputFile</code></dt>
    <dd>
A string element specifying the file name to which the model instance
should be exported.  If not specified, the default is standard output
(printing to the console).  [optional]
    <p />
    </dd>

    <dt><code>exporter</code></dt>
    <dd>
A string element specifying the <a href="#exporterplugins">exporter plug-in</a>
to use for exporting the model instance.  The string must specify the alias of a valid
exporter plug-in.  The default (if this element is not specified) is the 
<a href="#sbml">Systems Biology Markup Language</a> exporter plug-in. [optional]
    <p />
    </dd>
  </dl>
An example use of the <code>exportModelInstance</code> keyword is shown here:
<blockquote>
<pre>
exportModelInstance "m1": speciesPopulations "sp1", outputFile "model-sbml.xml";
</pre>
</blockquote>
which will export the model <code>m1</code> and the species populations collection
<code>sp1</code> to the file <code>model-sbml.xml</code>, in SBML format.
Another example use of the <code>exportModelInstance</code> keyword is shown here:
<blockquote>
<pre>
exportModelInstance "m1": speciesPopulations "sp1", outputFile "model.isbchem", 
                          exporter "command-language";
</pre>
</blockquote>
which will export the same model and species populations data, to the file
<code>model.isbchem</code>, in CMDL format.
<p />
</dd>

<dt><b><code>printModel</code></b></dt>
<dd>
The <code>printModel</code> statement is used to print a human-readable 
representation of a model, to standard output (the console).  The only
required element is the model name.  An example use of this statement is
shown here:
<blockquote>
<pre>
printModel "m1";
</pre>
</blockquote>
which prints the model <code>m1</code>.
<p />
</dd>

<dt><b><code>printSpeciesPopulations</code></b></dt>
<dd>
The <code>printSpeciesPopulations</code> statement is used to print a human-readable 
representation of a species populations collection, to standard output (the console).  The only
required element is the species populations collection name.  An example use of this statement is
shown here:
<blockquote>
<pre>
printSpeciesPopulations "sp1";
</pre>
</blockquote>
which prints the species populations collection <code>sp1</code>.
<p />
</dd>

<dt><b><code>include</code></b></dt>
<dd>
The <a href="#fileinclusion"><code>include</code> statement</a> includes the contents
a specified file, into the input stream of the model definition file being parsed, at the 
point where the include statement is encountered. 
<p />
</dd>

<dt><b><code>loop</code></b></dt>
<dd>
The <a href="#loops"><code>loop</code> statement</a> is an iteration
construct that causes one or more statements (bracketed with curly 
braces) to be executed one or more times.  The loop statement in the CMDL
has the same syntax as the <a href="#loops">loop statement in the CCMDL</a>.
<p />
</dd>

<dt><b><code>simulate</code></b></dt>
<dd>
The <code>simulate</code> statement runs a simulation of the reaction 
kinetics of the specified model, with the specified species populations 
collection as initial data.  The elements for this keyword are:
     <p />
     <dl>
     <dt><code>[model]</code></dt>
     <dd>
A string specifying the name of the model to be simulated, is required
immediately after the <code>simulate</code> keyword.  The model must have
been previously defined. [required]
     <p />
     </dd>

     <dt><code>speciesPopulations</code></dt>
     <dd>
A string element specifying the name of the species populations collection
that provides the initial data (initial species population values) for the
simulation.  The species population collection must have been previously
defined.  [required]
     <p />
     </dd>

     <dt><code>startTime</code></dt>
     <dd>
A numeric element specifying the starting time of the simulation. 
The value is a floating-point number.  The units of
the start time are the same as the units of the reciprocal
of the reaction parameters defined for the chemical reactions
in the model, which is normally seconds.  The default value
for this starting time is zero.  It is rarely necessary to
specify this parameter; the only case where it might be needed
is with reaction rate expressions or species population
expressions that explicitly involve the <code>time</code> symbol.
[optional]
     <p />
     </dd>

     <dt><code>stopTime <em>nnnnn</em></code></dt>
     <dd>
A numeric element specifying the stop time of the simulation.  The
value is a floating-point number.  The units of the stop time are the
same as the units of the reciprocal of the reaction parameters
defined for the chemical reactions in the model,
which is normally seconds. [required]
     <p />
     </dd>

     <dt><code>viewSpecies</code></dt>
     <dd>
A list element specifying the species whose populations are to be 
taken as the output of the simulation.  Each item in the list is
a string specifying a species name.  Each species must have been
previously defined, and must exist within the model.  This list may
contain zero elements.  [required]
     <p />
     </dd>

     <dt><code>numTimePoints</code></dt>
     <dd>
A numeric element specifying the number of
&quot;snapshots&quot; of the species populations that are to
be recorded over the course of the simulation.  The total
duration of the simulation (<code>stopTime</code> minus
<code>startTime</code>) is divided into <code>numTimePoints</code>
sub-intervals.  After each time subinterval has elapsed during
the course of the simulation, a &quot;snapshot&quot;
of the species populations (for those species specified with the
<code>viewSpecies</code> parameter defined above) is recorded.
The default value for this parameter is 100.  The parameter value
must be an integer greater than zero. [optional]
     <p />
     </dd>
     <dt><code>output</code></dt>
     <dd>
A modifier element specifying what should be done with the
&quot;snapshots&quot; of the species populations, that are
the &quot;output&quot; of the simulation.  The allowed
values are &quot;<code>store</code>&quot; and
&quot;<code>print</code>&quot;.  
         <p />
         <dl>
         <dt><code>print</code></dt>
         <dd>this
value is the default, and means that the output should be
printed to &quot;standard output&quot;, in comma-separated
value format (a format suitable for loading into Microsoft 
Excel or a similar spreadsheet application).
         <p />
         </dd>
         <dt><code>store</code></dt>
         <dd>The value
&quot;<code>store</code>&quot; means that the output
should be stored as a variable.  This is mostly useful
when chaining together multiple simulations with 
different reaction kinetics or simulators.  The output
from one simulation can be stored, and subsequently
used as the input to another simulation.  When you specify
&quot;<code>store</code>&quot; as the <code>output</code>
type of the <code>simulate</code> command, it is required that
you also specify the &quot;<code>storeName</code>&quot;
parameter, which is defined below.
         <p />
         </dd>
         </dl>
     <p />
     </dd>
     <dt><code>storeName</code></dt>
     <dd>
A string element specifying the variable name under which the
output species populations data should be stored.  This element
should only be used in conjunction with an <code>outputType</code>
of <code>store</code>; with that output type, it is required.
The &quot;store&quot; output feature is useful for chaining together 
multiple simulations, in which the output of one simulation becomes the
input for a subsequent simulation, within the invocation
of a single model definition script. If this element is specified
and the output type is not set to &quot;store&quot;, the element is
ignored.  [required if <code>outputType</code> 
is set to &quot;<code>store</code>&quot;]
     <p />
     </dd>
     <dt><code>ensembleSize</code></dt>
     <dd>
A numeric element specifying the number of separate
simulations should be run with the same parameters.
The resulting &quot;snapshot&quot; values for species
populations over time will be averaged for each time
point and species, over the &quot;ensemble&quot; of
realizations of the simulation.  This essentially implements
an ensemble average of time-series species populations.
The numeric element value is required to be an
integer greater than zero.  This feature is useful when using
a stochastic simulator, in order to 
The species population
values that are printed will be floating-point numbers,
even for floating species (which can only have integer
population values within a given realization of the ensemble),
due to the averaging process.  The &quot;<code>ensembleSize</code>&quot;
parameter may <em>not</em> be specified with the
&quot;<code>output store</code>&quot; parameter, because
floating-point values may not be stored in a 
<a href="#speciespopulations">species populations collection</a>
object, for floating species. If this element is not specified,
no ensemble averaging is performed.  [optional]
    <p />
    </dd>
    <dt><code>outputFile</code></dt>
    <dd>
A string element that species the file name to which the simulation output
should be saved.  The string value is the file name.
The &quot;<code>output print</code>&quot;
output type should be specified, if this parameter is specified.
The output is saved in comma-separated-value (CSV) format.  If
you specify the file extension (&quot;<code>.csv</code>&quot;),
it should enable the output file to be opened in the default
spreadsheet application for your desktop computer's graphical
windowing system (e.g., GNOME or Windows). If the <code>outputType</code>
is not set to &quot;<code>print</code>&quot;, this element is ignored.
[optional]
    <p />
    </dd>
    <dt><code>debug</code></dt>
    <dd>
A numeric element that specifies an integer &quot;debug level&quot; for the
simulator.  The higher the debug level specified, the more
verbose the debugging information that will be displayed
by the simulator.  This is useful for &quot;debugging&quot;
simulations that appear to be malfunctioning or giving 
unexpected reaction kinetics.  Possible values are:
      <ol start="0">
        <li><code>NONE</code>: no debugging output</li>
        <li><code>LOW</code>: minimal debugging output (number of iterations, start and stop of simulation)</li>
        <li><code>MEDIUM</code>: medium level of debugging output</li>
        <li><code>HIGH</code>: high level of debugging output (each reaction step is printed)</li>
        <li><code>EXTREME</code>:  extreme level of debugging output</li>
      </ol>
The amount and type of debugging information that will 
be printed will vary with the type of 
<a href="#simplugins">simulator plug-in</a> that
is being used.  This option should be used carefully, as it
can severely degrade the efficiency of the simulation engine,
and it can generate voluminous output that must be buffered
and printed to the &quot;standard error&quot; stream (console).
The default value of this parameter is 0 (no debugging output),
which is (by far) the most efficient in terms of performance.
[optional]
    <p />
    </dd>
    <dt><code>simulator</code></dt>
    <dd>
A string element that specifies the <a href="simplugins">simulator plug-in</a> 
to use for the simulation.
The default is &quot;<code>gillespie</code>&quot;, the Gillespie
simulator plug-in. [optional]
    <p />
    </dd>
    </dl>
    <p />
The &quot;<code>simulate</code>&quot; statement is usually
placed at the end of a model definition file, after all of the
reaction definitions.  The following is an example of a simulate 
statement:  
<blockquote>
<pre>
simulate "m1": speciesPopulations "sp1", startTime 0, stopTime 500.0, numTimePoints 100, debug 1,
           viewSpecies ("G3D_G80D" "G4_RNA" "G80_RNA" "G3_RNA" "G4D_free" "G80D_free" "G3D_free"),
           output store, storeName "final", simulator "gillespie";
</pre>
</blockquote>
The above example runs a simulation for <code>500</code> seconds, and
stores the output under variable name &quot;<code>final</code>&quot;.
The following is another example of a simulate statement:
<blockquote>
<pre>
simulate "m1": speciesPopulations "sp1", startTime 0, stopTime 500.0, numTimePoints 100, debug 1,
           viewSpecies ("G3D_G80D" "G4_RNA" "G80_RNA" "G3_RNA" "G4D_free" "G80D_free" "G3D_free"),
           output print, outputFile "myFile.csv", simulator "gillespie", ensembleSize 10;
</pre>
</blockquote>
The above example runs 10 simulations and averages over the results,
and stores the output of the simulation in the file 
&quot;<code>myFile.csv</code>&quot;.
    <p />
Note that &quot;<code>myModel</code>&quot; is the special name 
of the default model in the CCMDL.  In the CMDL, all models
are explicitly named, and the model name of the model to be
simulated is always specified after the &quot;<code>simulate</code>&quot;
statement.
    <p />
</dd>       


</dl>



</isb:docsubsection>

<isb:docsubsection name="Symbol Names" label="cmdl-symbolnames">
In the CMDL, all <a href="#symbols">symbol names</a> defined 
(except for parameters that are defined in a reaction namespace) 
reside within the global
namespace.  This means that, for example, a compartment and
a species cannot have the same name.  Each symbol that is
defined must have a unique name.
<p />
Note that in the CMDL, a species symbol appearing in a
reaction rate expression can mean one of two things, 
depending on the <a href="#reactionratespeciesmode">
reaction rate species mode</a> of the <a href="#models">model</a>
with which the reaction is associated.  For a reaction rate species
mode of &quot;molecules&quot; (the default), the symbols 
<code>A</code> and <code>B</code> in the reaction rate 
mathematical expression refer to the numeric populations
of species <code>A</code> and <code>B</code>, respectively.
For a reaction rate species mode of &quot;concentration&quot;,
the symbols <code>A</code> and <code>B</code> in the reaction 
rate mathematical expression refer to the molar concentrations
of species <code>A</code> and <code>B</code>, respectively.
In the CCMDL, the only reaction rate species mode is 
&quot;molecules&quot;, so species symbols appearing in
a rate expression always denote species populations in
molecules.
</isb:docsubsection>


</isb:docsection>


<!-- ========== SBML ========== -->

<isb:docsection name="Systems Biology Markup Language (SBML)" label="sbml">
<p>
This section describes the Systems Biology Markup Language.  The
systems biology markup language is an XML-based document specification
for defining a <a href="#modelinstances">model instance</a> for a
system of interacting chemical species.  The specification for SBML
can be found at the home page of the 
<a href="&sbmlURL;">Systems Biology Workbench Development 
Group</a>.  
</p>
<p>
The &appName; system is capable of importing a model instance
from an SBML document, and exporting a model instance (defined through
a different language) to an SBML document.  Some features of the &appName;
system cannot be exported to an SBML document.  In particular, a boundary
species whose population is a mathematical expression defining a function
of time, cannot be exported to SBML.   Similarly, certain SBML constructs
will not be imported into the &appName; system, namely, unit definitions.
The &appName; system can import SBML documents with either of two systems
of units:
<ul>
<li>Initial species populations specified in moles; Reaction rates
specified using expressions in which species symbols represent molar concentration</li>
<li>Initial species populations specified in molecules; Reaction rates
specified using expressions in which species symbols represent number of molecules</li>
</ul>
While this is a fairly significant limitation, the above two cases permit
successful import of most of the SBML models available.
</p>
</isb:docsection>

<!-- ========== COMMAND-LINE INTERFACE ========== -->

<isb:docsection name="&appName; Command-line Interface" label="commandline">
<p>
A command-line interface to the &appName; scripting engine is available.
On Windows and Linux/Unix operating systems, the <code>&appNameCommandLine;.bat</code> (Windows)
and <code>&appNameCommandLine;.sh</code> (Linux/Unix) shell scripts can be used to run the 
command-line interface to the scripting engine.  These shell scripts should
be located in the &quot;<code>bin</code>&quot; subdirectory of the directory in 
you installed &appName;.  For the purposes of illustration, we will assume
that the <code>&appNameCommandLine;.sh</code> is being used.  If you are using a Windows machine,
<code>&appNameCommandLine;.bat</code> should be substituted wherever <code>&appNameCommandLine;.sh</code> appears
in the following.
</p>
<p>
The usage synopsis for the <code>&appNameCommandLine;.sh</code> is as follows:
<blockquote>
<pre>
&appNameCommandLine;.sh [-debug] [-parser &lt;parserAlias&gt;] &lt;scriptFile&gt;
</pre>
</blockquote>
The symbols above are defined as follows:
<dl>
<dt>&lt;<code>parserAlias</code>&gt;</dt>
<dd>The alias of the parser plug-in to use.  This should correspond to the type
of file being processed.  The alias identifies a class implementing the interface
<code>isb.chem.scripting.IScriptBuildingParser</code>.  By default, the parser
is selected based on the file extension of the file <code>&lt;scriptFile&gt;</code>.
If the file extension is &quot;&ccmdlExtension;&quot;, the <a href="#ccmdl">CCMDL</a>
parser will be used.  If the file extension is &quot;&cmdlExtension;&quot;, the
<a href="#cmdl">CMDL</a> parser will be used.  If the file extension is 
&quot;&sbmlExtension;&quot;, the <a href="#sbml">SBML</a> parser will be used.
If the file suffix does not match any of the above, the CMDL parser is assumed.
To specify a parser rather than using the default parser for the file extension,
use of the following parser aliases:
    <dl>
    <dt><code>condensed-command-language</code></dt>
    <dd>Condensed Chemical Model Definition Language (CCMDL)</dd>
    <dt><code>command-language</code></dt>
    <dd>Chemical Model Definition Language input (CMDL)</dd>
    <dt><code>markup-language</code></dt>
    <dd>Systems Biology Markup Language (SBML)</dd>
    </dl>
</dd>
<dt>&lt;<code>scriptFile</code>&gt;</dt>
<dd>specifies the model definition file to be processed by the scripting 
engine</dd>
</dl>
The case of the SBML parser described above deserves some special
explanation.  Because the SBML Level 1 standard does not provide for 
embedding action-performing statements in the model definition file
(such as a statement instructing that a simulation should be executed),
the command-line interface to the scripting engine handles SBML files
differently from other file input types.  SBML files are automatically
converted to CMDL format, and the resulting CMDL statements are printed
to standard output (the console).  This output can be redirected to
a new CMDL file (e.g., &quot;<code>myModel.&cmdlExtension;</code>&quot;)
using standard operating system shell indirection.  One can then append
action-performing statements to the end of the CMDL model definition file,
and re-load the file in the scripting engine, in order to execute 
simulations or the like.
</p>
<p>
In order to be able to use the command-line interface to the &appName;
system, you may need to set up your Java <code>CLASSPATH</code>
variable properly.  On most operating systems, this is an environment
variable.  If you installed &appName; in the default directory (just
clicked &quot;next&quot; when prompted to specify the installation directory),
you should not need to specify the <code>CLASSPATH</code> when running
the <code>&appNameCommandLine;</code> program.  However, if you selected a directory
other than the default directory for &appName; as the installation directory,
you will need to modify the <code>CLASSPATH</code> environment variable to add
the <code>&localJavaLibraryName;.jar</code> file to the path.  This file
is installed in the &quot;<code>lib</code>&quot; subdirectory of the
directory in which you installed the &appName; system.  In addition,
if you wish to be able to import or export SBML, you will need to add
the <code>SBMLValidate.jar</code> file and the <code>SBWCore.jar</code>
file to your <code>CLASSPATH</code>.  Both of these JAR files are in
the &quot;<code>lib</code>&quot; subdirectory where you installed &appName;.
For example, if you installed &appName; in the &quot;<code>/usr/opt/&appName;</code>&quot;
directory, your <code>CLASSPATH</code> variable might me modified to look
like this:
<blockquote>
<pre>
CLASSPATH=/usr/opt/&appName;/lib/&localJavaLibraryName;:/usr/opt/&appName;/lib/SBWCore.jar
</pre>
</blockquote>
on Linux.  On Windows, if you installed &appName; in the
&quot;<code>U:\&appName;</code>&quot; directory, your 
<code>CLASSPATH</code> variable might be modified to look like
this:
<blockquote>
<pre>
CLASSPATH=U:\&appName;\lib\&localJavaLibraryName;;U:\&appName;\lib\SBWCore.jar
</pre>
</blockquote>
Again, manually setting the <code>CLASSPATH</code> environment variable
is only necessary if you selected an installation directory other than
the default directory suggested by the &appName; installer program.
</p>
<p>
In addition to setting your <code>CLASSPATH</code> variable, your
shell <code>PATH</code> variable must be set so that the &quot;<code>java</code>&quot;
program can be found within the <code>PATH</code>, in order to use the
command-line interface to &appName;.
</p>

</isb:docsection>

<isb:docsection name="&appName; Programmatic Interface" label="api">
<p>
The &appName; system is entirely implemented in the Java programming
language.  All of the Java classes that make up the  &appName; system
are provided within a library of Java packages called &localJavaLibraryName;.
The packages within this library were designed to be reusable and extensible.
This library represents the programmatic interface to the &appName; system.
</p>
<p>
<a href="&webBaseURL;/&localJavaLibraryName;/javadoc">Javadoc application 
programming interface (API) documentation</a> to the &localJavaLibraryName; library
(including &appName;) can be
found on the <a href="&webBaseURL;/&localJavaLibraryName;">&localJavaLibraryName;
home page</a>.  The source code and compiled Java archive (JAR) file for this
library can be downloaded from the same home page.  In addition, a downloadable
PDF version of the user manual for the library is available.
</p>
<p>
As a concrete illustration of a possible use of the API to &appName;,
here is an example of a Java program that makes use of the programmatic
interface to the &appName; system, to run a stochastic simulation of
a simple system of chemical species and reactions:
<blockquote>
<pre>
package isb.chem.tp;

import isb.chem.*;
import java.util.Date;

/**
 * Sample program that uses the GillespieSimulator algorithm to simulate
 * the dynamics of an ion channel system (two species representing a switch
 * being in the &quot;open&quot; or &quot;closed&quot; states, respectively.
 * For more information, refer to Chapter 11 of: 
 * Computational cell biology, by C. P. Fall, E. S. Marland,
 * J. M. Wagner, and J. J. Tyson. Springer-Verlag, New York, 2002.
 * This book defines the model system being simulated in this test program,
 * and shows what output (in terms of steady-state species populations) is 
 * expected.
 */
public class IonChannel
{
    public static final int NUMBER_TIME_POINTS = 10;

    public static void main(String []pArgs)
    {
        try
        {
            Compartment universal = new Compartment("universal");
            Species s1 = new Species("s1", universal);
            Species s2 = new Species("s2", universal);

            Reaction r1 = new Reaction("r1");
            r1.addReactant(s1);
            r1.addProduct(s2);
            r1.setRate(1.0);

            Reaction r2 = new Reaction("r2");
            r2.addReactant(s2);
            r2.addProduct(s1);
            r2.setRate(3.0);

            SpeciesPopulations initialData = new SpeciesPopulations();
            initialData.setSpeciesPopulation(s1, 500);
            initialData.setSpeciesPopulation(s2, 500);

            Model model = new Model("IonChannel");
            model.addReaction(r1);
            model.addReaction(r2);

            System.out.println(model.toString());

            GillespieSimulator gillespie = new GillespieSimulator();

            System.out.println("date: " + new Date(System.currentTimeMillis()));

            SpeciesPopulations speciesPops = new SpeciesPopulations();

            double startTime = 0.0;

            for(int simCtr = 0; simCtr &lt; 500; ++simCtr)
            {
  
                double timeConstant = gillespie.computeInitialAggregateTimeConstant(model, initialData, 0.0);
                gillespie.evolve(model, 
                                 initialData, 
                                 startTime,
                                 5000,
                                 speciesPops);

                long s1pop = speciesPops.getSpeciesPopulation(s1);
                long s2pop = speciesPops.getSpeciesPopulation(s2);
                System.out.println(s1pop + "," + s2pop);
            }

            System.out.println("date: " + new Date(System.currentTimeMillis()));
            System.out.println("model: " + model.toString());
        }
        catch(Exception e)
        {
            e.printStackTrace(System.err);
        }
    }
}
</pre>
</blockquote>
</p>
<p>
For more information on how to use the &localJavaLibraryName; library,
please refer to the 
<a href="&webBaseURL;/&localJavaLibraryName;/docs/UserManual.html">&localJavaLibraryName;
User Manual</a>.
</p>

</isb:docsection>

<!-- ========== GRAPHICAL USER INTERFACE ========== -->

<isb:docsection name="&appName; Graphical User Interface" label="gui">
<p>
The &appName; system has a graphical user interface (GUI) application 
that is layered on top of the previously described 
<a href="#ccmdl">scripting engine</a>.  This GUI is a work in progress.
This section presumes that you have already installed the &appName;
application using the 
<a href="&appHomePage;/&appVersion;/installer/Web_Installers/install.htm">downloadable, self-extracting 
installer</a>.  To start the &appName; application, find the link 
entitled &quot;&appName;&quot; in your home directory or start menu.
Launch the executable file that this symbolic link points to.  This should
launch the &appName; application.  It takes a moment to load, because it
must first start up the Java virtual machine and search your classpath for
plug-ins.
</p>
<p>
The &appName; application provides the following features:
<ul>
<li>load a model definition file</li>
<li>run a simulation and store, plot, or print the results</li>
<li>export a model instance to a file of a specified format</li>
</ul>
A sample screen shot of the &appName; graphical user interface follows:
</p>
<p>
<a href="../images/screenshot1.png"><img src="../images/screenshot1-small.png" alt="screenshot" /></a>
</p>
<p>
Each of the above features will be described in turn.
</p>

<isb:docsubsection name="Load a model definition file" label="gui-loadfile">
<p>
The first step in using the &appName; GUI application is usually to
load a model definition file.  This is done by selecting the &quot;Open...&quot;
option from the &quot;File&quot; menu.  You will be asked to specify a model
definition file.  By default, only model definition files whose file extensions
(file name suffixes) are of a recognized type, are displayed.  By selecting
&quot;All files&quot; from the pull-down menu &quot;Files of Type&quot;, you
can optionally choose from among any file, regardless of the file extension.
When the file is selected, if you click on the &quot;open&quot; button, the
model definition file that you selected will be processed by the scripting
engine.  
</p>
<p>
<b>NOTE:</b> only definition statements appearing in the model definition file
will be processed.  If the model definition file contains 
<a href="#actionperformingstatements">action-performing statements</a>,
they will be ignored by the scripting engine in the GUI application.  This is
the case because the GUI application provides all of the same functionality
of the action-performing statements; the action-performing statements are intended
only for use in the command-line scripting environment.
</p>
<p>
The names of the <a href="#models">model(s)</a> and 
<a href="#speciespopulations">species population collections</a> defined
by the file, will be displayed in the &quot;models:&quot; and
the &quot;species population sets:&quot; list boxes in the main &appName;
window.
</p>
<p> 
You can view the details of any model or species population collection
that has been loaded into &appName;, by double-clicking on the name of
the model or species population collection in the aforementioned list boxes.
When you do this, information about the model or species population collection
will be printed in the large text box labeled &quot;runtime output log&quot;.
</p>
</isb:docsubsection>

<isb:docsubsection name="Run a simulation" label="gui-runsimulation">
<p>
Once a <a href="#models">model</a> and a <a href="#speciespopulations">species
population collection</a> have been selected (with a single click on
the name of each in their corresponding list boxes), the &quot;Simulate...&quot;
menu option under the &quot;Tools&quot; menu becomes enabled (no longer
greyed out).  Selecting the &quot;Simulate...&quot; menu option causes a
dialog box entitled &quot;&appName;: simulator&quot; to be displayed.
In this dialog box, you must specify the start and stop time for the 
simulation, as well as the output type, the type of simulator (i.e.,
which <a href="#simplugins">simulator plug-in</a> to use), and the
list of species to be included in the &quot;output&quot;.  The start 
time defaults to 0.0, and it is rarely necessary to use a different value.
The simulator defaults to the 
<a href="&webBaseURL;/&localJavaLibraryName;/javadoc/isb/chem/GillespieSimulator.html">
Gillespie Simulator</a>.
You must select at least one species to be included in the &quot;output&quot;.
The other species not selected, may still participate in the simulation,
but their population values over time will not be included in the data
resultant from running the simulation.  
</p>
<p>
The optional &quot;ensemble size&quot; text box is used to define an integer
number of repetitions for the simulation.  The results are then defined
as the average of the time-series data (separately for each species and each
time point) over the &quot;ensemble&quot; of simulations.  If you do not
specify an ensemble size, a single simulation is conducted (no ensemble
averaging).  It is usually best to run a simulation with no ensemble averaging
first, before running with an ensemble average.  This allows for you to
compute the expected &quot;run time&quot; of the ensemble averaged
simulation, in advance.  Note that when doing an ensemble-averaged simulation,
you may not select the &quot;store&quot; output type.
</p>
<p>
The &quot;output type&quot; can 
be &quot;print&quot; (the default), which just prints the values for the
species populations, over time, in a simple comma-separated-value format,
in the &quot;runtime output log&quot; text box.  The &quot;plot&quot;
output type will cause a graphical plot to be generated.  Note that when
plotting the output, all species selected are displayed on the same graph.
This means that one species with values that are much greater than the other
species, will cause Y-axis scaling that will render the other species
data points all at the bottom of the graph window.  To avoid this problem,
you can display a graph without the species with large population values, or
you can export the data in comma-separated value format. This is done by
selecting the &quot;file&quot; output type. With the data in a file in 
comma-separated-value format, you may import the data into a program that
has more sophisticated graphing capabilities, such as Gnuplot, Octave,
Gnumeric, Excel, or Matlab.  The &quot;store&quot; output type is a special
value that requests that the data resultant from running the simulation (i.e.,
the final population values at the end of the simulation) be stored as a
new <a href="#speciespopulations">species populations collection</a> object
whose name you specify as a string.  This name must be a valid 
<a href="#symbols">symbol name</a>.  After the simulation, the new species
populations collection name should show up in the &quot;species populations
sets&quot; list box in the main &appName; window.  You may then use the
species population collection as the initial data for a subsequent simulation.
Note that specifying the &quot;store&quot; output type is not allowed when
you are specifying an &quot;ensemble size&quot; (ensemble-average over multiple
simulations).
</p>
</isb:docsubsection>

<isb:docsubsection name="Export model instance" label="gui-export">
<p>
A <a href="#modelinstance">model instance</a> may be exported to one of two
different formats:  <a href="#sbml">SBML</a> and <a href="#cmdl">CMDL</a>.
Both of those formats may be subsequently loaded into the &appName; system.
Note that you must select <em>both</em> a model and a set of initial species
population data (which together constitute a &quot;model instance&quot;), 
in order to use the &quot;export&quot; feature.  The export feature
is used by first selecting a model and a species population collection in
the list boxes named &quot;models&quot; and &quot;species population sets&quot;
in the main &appName; window, and then selecting &quot;Export...&quot; menu
item from the &quot;Tools&quot; menu.  You will be presented with a dialog 
box in which you must specify the file format for exporting the model instance.
You will then be prompted to specify the file name and location for the file
to which the model instance should be exported.  This feature is useful for
converting, say, an SBML model instance into a CMDL model instance, which
one might then further customize and modify.  Similarly, this feature can
be used to export a model instance defined in either CMDL or CCMDL, into
SBML format.  The model instance thus exported can then be imported into a
variety of modeling and visualization tools that support the SBML format for
model interchange.
</p>
</isb:docsubsection>

</isb:docsection>

<isb:docsection name="Getting Help" label="gettinghelp">
<p>
If you find that the &appName; program does not function in accordance
with the descriptions in this manual, or if there are sections of
this manual that are incorrect or unclear, the authors would like to 
hear about it, so that we can make improvements and fix bugs in the
software.  Furthermore, the authors would appreciate feedback
regarding new features or improvements that would be useful to
users of this software.  Before e-mailing the authors, it is a good
idea to check the <a href="&appHomePage;">&appName; application home page</a>
to see if a new version has been released, in which your specific
problem may have been corrected.  All releases are documented in
the &quot;version history&quot; page accessible from the home page.
The best way to contact the authors is to send e-mail to:
<blockquote>
<code>&appMaintainerEmailSafe;</code>.
</blockquote>
The authors will attempt to respond to your e-mail as quickly as
possible.
</p>
<p>
If you are reporting a bug, or something that you suspect is a bug,
please provide as much information as you can about your specific
installation of the &appName; program.  In particular, please provide
us with the version number of the &appName; program that you are using,
the type and version number of the Java Runtime Environment that you
are using (e.g., Sun JRE version 1.4.1), and your operating system
type and verion (e.g., Red Hat Linux 8.0).  Furthermore, if the
problem is with a specific model definition file, please send us the
model definition file, and any model definition files that it 
<a href="#fileinclusion">includes</a>.  If the problem that you 
encountered generated a &quot;stack backtrace&quot; on the console,
please include the full stack backtrace text in your bug report.
Please also send us the text of any error message that you may 
have been reported by the application, in a dialog box or the like.
Providing this information will dramatically increase the likelihood
that the authors will be able to quickly and successfully resolve
the problem that you are encountering.
</p>

</isb:docsection>


</isb:document>


