><?xml version="1.0"?>
<?xml-stylesheet type="text/xml" href="../../config/documentation-stylesheet.xml"?>
<!DOCTYPE isbdocument [
  <!ENTITY % CommonConfig SYSTEM "../../config/CommonConfig.dtd">
  %CommonConfig;
<!ENTITY baseURL "http://labs.systemsbiology.net/bolouri">
   ]>

<isb:document xmlns:isb="http://www.systemsbiology.org/xmlns"
              xmlns:html="http://www.w3.org/TR/xhtml1"
              xmlns="http://www.w3.org/TR/xhtml1">

<isb:doctitle>Web Pages Management Manual</isb:doctitle>
<isb:docdate>$Date$</isb:docdate>

<isb:doccontents />

<isb:docsection name="Introduction" label="introduction">
<p>
This document contains detailed instructions on how to manage
the &mainGroup; web pages.  The goals of this framework are
automation of the build/upload processes, ease of style
modifications, and integration with our Java code base. 
</p>
</isb:docsection>

<isb:docsection name="Main web pages" label="main">

<p>
The main &mainGroup; web pages are stored on our NFS file
server, and are controlled by a simple Windows scripting mechanism.
The files are archived in the directory:
<blockquote>
<pre>
/proj/bolrilab/BOLOURI_GROUP_WEB_PAGES/content
</pre>
</blockquote>
On Windows, this directory appears as:
<blockquote>
<pre>
\\isb-1\bolouri\BOLOURI_GROUP_WEB_PAGES\content
</pre>
</blockquote> To access 
the web pages archive, your computer must be on the network.
</p>
<p>
Open the &quot;content&quot; folder of the web site archive
(full directory name given above) in your
file browser/explorer.  Then you can edit HTML files
within the folder, using an appropriate HTML editing
program.  Make sure to save your changes, and test them
using your web browser, before proceeding to the next
step (publishing the pages).  
</p>
<p>
You may add new pages to the &quot;content&quot; folder,
or even new subdirectories.  However, please do NOT
create a &quot;software&quot; subdirectory, as this 
is reserved for web content published from our CVS
repository.  New web pages should be simple static HTML
pages, that do not employ any of the following technologies:
<ul>
<li>server-side includes (SSI)</li>
<li>common gateway interface (CGI)</li>
<li>Apache mod_perl and other embedded scripting languages</li>
<li>server-side XML/XSL translation</li>
</ul>
(If you do not know what the above are, do not worry about
it.)  
</p>
<p>
<b>images:</b>New images should be put into the &quot;images&quot;
folder under the &quot;content&quot; folder.  
</p>
<p>
<b>non-HTML documents:</b> You may publish non-HTML documents
such as PDF documents. Just copy the PDF file to the &quot;content&quot;
folder, and it will be published the next time someone runs the
&quot;updateWeb&quot; script.  PDF is generally preferred over
Word (<code>.doc</code>) and PowerPoint (<code>.ppt</code>) 
document formats, but this is not a requirement.
</p>
<p>
For any new
files you add under the &quot;content&quot; folder, make sure
they have world-readable file permissions (i.e., are
readable by any user).
</p>
<p>
Please note that any files you place within &quot;content&quot;
will be (potentially) visible to the outside world.  A file
<code>MyFile.html</code> placed within the &quot;content&quot;
directory will be available for unrestricted HTTP download 
on the web server at the following URL:
<blockquote>
<pre>
&baseURL;/MyFile.html
</pre>
</blockquote>
The only exception to this is files placed within the
&quot;private&quot; subdirectory.  These are protected
so that they are not visible outside the local domain
(the institute).  But they are still visible to anyone within
the institute.  A file <code>MyFile.html</code> placed within
the &quot;private&quot; subdirectory of &quot;content&quot;
will be visible at the following URL:
<blockquote>
<pre>
&baseURL;/private/MyFile.html
</pre>
</blockquote>
</p>
<p>
The &quot;models&quot; subdirectory is for publishing
a new model definition file.  Adding a new model definition
file to the repository is a two-step process.  First, add
your model definition file to the &quot;models&quot; subdirectory.
Then you need to edit the &quot;index.html&quot; file
within the same directory, in order to add a hyperlink
to the new model definition file.  Otherwise, a person
browsing our online model repository will never know that
your new model definition file is available to download.
</p>
<p>
Once you have added your new web content or made your
changes to the &quot;content&quot; directory, just run
the following script to publish it to the web server.
On Linux:
<blockquote>
<pre>
/proj/bolrilab/BOLOURI_GROUP_WEB_PAGES/tools/uploadWeb.sh
</pre>
</blockquote>
And on Windows:
<blockquote>
<pre>
\\isb-1\bolouri\BOLOURI_GROUP_WEB_PAGES\tools\uploadWeb.bat
</pre>
</blockquote>
Then use your web browser to test to see if the content
is updated on the web server.
</p>
<p>
It is a good idea to periodically make a back-up copy of 
all of the web content under the &quot;content&quot; directory.
There is a script set up to perform this task.  All you need
to do is to run the script, and all of the web content 
will be &quot;backed up&quot; (copied to a different directory).
The script is (on Linux):
<blockquote>
<pre>
/proj/bolrilab/BOLOURI_GROUP_WEB_PAGES/tools/backupWeb.sh
</pre>
</blockquote>
and on Windows:
<blockquote>
<pre>
\\isb-1\bolouri\BOLOURI_GROUP_WEB_PAGES\tools\backupWeb.bat
</pre>
</blockquote>
This script will copy all of the files under &quot;content&quot;
to the directory:
<blockquote>
<pre>
BOLOURI_GROUP_WEB_PAGES/backup
</pre>
</blockquote>
from where the files can be restored
should anything get deleted from &quot;content&quot;accidentally.
</p>
<p>
Please note that the &quot;external&quot; group web page
<blockquote>
<pre>
&mainGroupURL;
</pre>
</blockquote>
is maintained by IT Services (<code>&mainHelpEmailSafe;</code>).
</p>

</isb:docsection>

<isb:docsection name="Software Web Pages" label="software">
<p>
The &mainGroup; software web pages are stored and published
separatedly from the main group web pages.  They are written in a variant 
of <a href="http://www.w3c.org/MarkUp">XHTML</a> that uses a
special &quot;stylesheet&quot; to unify the &quot;look and feel&quot; 
of the web pages.   The use of a
common stylesheet means that by making an edit to one file, one can (in
principle) modify the look and feel of all of our web pages in a
consistent manner.   The stylesheet used is not CSS (cascading style sheets),
but instead the <a href="http://www.w3c.org/TR/xsl">XSL</a> framework.
</p>
<p>
There is a <a href="SampleDocument.xml.txt">Sample web document</a>
that illustrates how to write a web document using the XSL framework
and the local style sheet conventions.  The version of the 
<a href="SampleDocument.html">sample document
translated (automatically) into HTML</a> is also available.
Note that the only knowledge required in order to write a
web document using this template is a rudimentary understanding of
<a href="http://www.w3.org/MarkUp">XHTML</a>.
</p>
<p>
Managing the &mainGroup; software web pages requires that certain software
programs be installed on your computer.  The process is likely to 
be much easier on a Linux computer, but in principle it should be
do-able on a Windows computer.  You will need the following software
installed on your computer:
</p>
<p>
<ol>
<li><b>CVS client</b><br /> 
Please refer to the <a href="SoftwareDevelopmentGuidelines.html#cvsrepository">
CVS Repository</a> of the Software Development Guidelines document,
for information on how to obtain and use CVS on your desktop computer.
</li>
<li><b>Java Development Kit (JDK)</b><br />
The JDK version 1.4 or newer must be installed on your computer,
or available via a network drive mounted on your computer.  To confirm
that it is installed correctly, you should be able to execute the 
&quot;<code>java -version</code>&quot;
command from your command shell prompt.  A suitable JDK package is 
available from <a href="http://java.sun.com">Sun Microsystems</a>.
If you are using Linux, the JDK software is already available in the
network directory &quot;<code>/tools/java/sdk</code>&quot;.
</li>
<li><b>Ant</b><br />
The Ant program is the software
tool used for &quot;building&quot; the web site.  To confirm that Ant 
is installed correctly, you should be able to run 
&quot;<code>ant -version</code>&quot; from the command prompt. If you
do not have Ant installed on your desktop computer, you can download
the source code from the Apache web site:
<blockquote>
<a href="http://ant.apache.org"><code>http://ant.apache.org</code></a>
</blockquote>
Whether you use an already-built version, or build your own from
sources, you will need to have a version of the Ant program that contains
the optional &quot;<code>ftp</code>&quot; task.  This task appears
to only be included in the Ant program if you build the Ant program
with a special library called &quot;<code>NetComponents.jar</code>&quot;
in your <code>CLASSPATH</code>.  The <code>NetComponents.jar</code>
library is available from the web site:
<blockquote>
<a href="http://www.savarese.org/java/"><code>http://www.savarese.org/java</code></a>
</blockquote>
Make sure that a copy of the <code>NetComponents.jar</code> file is placed
in the &quot;<code>lib</code>&quot; subdirectory of the installation
directory you selected for installing Ant (normally this is something 
like <code>/local/ant</code>). Alternatively, <code>NetComponents.jar</code> 
must be in your <code>CLASSPATH</code> each time your invoke the Ant program.
</li>
<li><b>Xalan/Crimson</b><br />
The Xalan XSL processor and the Crimson XML parser Java libraries are 
both needed.  Both of these *should* be installed with your JDK, but if not,
you will have to download and install them, and make sure the relevant
"JAR" files are in your CLASSPATH environment varaible.  The software
can be downloaded from <a href="http://xml.apache.org">Apache</a>. 
To confirm that Xalan/Crimson are installed correctly, you should be able to run
<blockquote>
<pre>
java org.apache.xalan.xslt.Process -v
</pre>
</blockquote>
from the command prompt.
</li>

</ol>
All of the above software programs are free (open source), and easy to
build and install on your computer.  Building Ant, and installing Ant 
and <code>NetComponents.jar</code>, should just take a few minutes.  
On Linux, if you use the JDK (&quot;<code>java</code>&quot;) found 
in the network directory <code>/tools/java/sdk</code>, you should not 
have to worry about items (2) and (4) above.
</p>
<p>
In addition, your computer will need to be connected to the network, and
you will need to have read access to the &mainGroup; project
directory. The path to this directory is as follows:
<blockquote>
<code>/proj/bolrilab</code>&nbsp;&nbsp;(on Linux)   [note the "u" is missing, intentionally]<br />
<code>\\isb-1\bolourilab</code>&nbsp;&nbsp;(Windows)<br />
</blockquote>
The web pages are stored in a CVS repository in the &mainGroup;
project directory.  To access the web pages, set your CVSROOT
environment variable to 
<blockquote>
<code>/proj/bolrilab/CVS_REPOSITORY</code>&nbsp;&nbsp;(on Linux)<br />
<code>\\isb-1\bolourilab\CVS_REPOSITORY</code>&nbsp;&nbsp;(on Windows)<br />
</blockquote>
Finally, your computer will need to be &quot;behind the firewall&quot;
of the &mainAffiliation;; otherwise, you not be allowed
to upload your web content to the web server.  For security
reasons, the web server does not accept FTP connections for 
the &mainGroup; account from outside the firewall.
</p>
<p>
To start managing web content, first make sure you have 
installed all of the required software and executed the 
preliminary steps outlined in the previous section.
Then execute the command
<blockquote>
<pre>
cvs co bolouri
</pre>
</blockquote>
somewhere on your desktop computer.  This &quot;checks out&quot;
the source code for the group web pages onto your computer, from the CVS 
server.  This will create a subdirectory 
&quot;<code>bolouri</code>&quot; of your current working
directory; this subdirectory is known as your CVS 
&quot;enlistment&quot;.  The web content is contained within the 
&quot;<code>bolouri/docs</code>&quot;
subdirectory.  The main group &quot;Resources page&quot;
content is in the file
<blockquote>
<pre>
bolouri/docs/Resources.xml
</pre>
</blockquote>
The contents of the file should be mostly
familiar to people who have written HTML (or XHTML) before.  To modify
the file, just open it in a text editor and make your edits.
</p>
<p> 
To add a <em>new</em> document to our web pages, just add a new file 
(such as &quot;<code>MyFile.xml</code>&quot;) to the
&quot;<code>bolouri/docs</code>&quot; subdirectory.  Make sure the
file name ends with the suffix &quot;<code>.xml</code>&quot;.
Also, the file must be placed in the &quot;<code>bolouri/docs</code>&quot;
directory.  For the contents of this file, you can use the 
existing &quot;<code>Resources.xml</code>&quot; file
as a template to start with.  
</p>
<p>
There is a good <a href="http://www.w3c.org/MarkUp/Guide">tutorial</a>
available on writing proper XHTML.  Note that anything you put in the
web page documentation (i.e., in one of the &quot;<code>.xml</code>&quot;
files within the &quot;<code>bolouri/docs</code>&quot; directory)
must be &quot;strictly compliant&quot; XHTML.  The meaning of this 
statement is fully explained within the specifications and tutorial on 
XHTML referenced in the aforementioned URLs.  
</p>
<p>
The next step is to test out your new web page (or your edits to
an existing web page, whatever the case may be).  This is done by simply
running the command
<blockquote>
<pre>
ant buildHTML
</pre>
</blockquote>
from within the &quot;<code>bolouri</code>&quot; directory.  If there is
an error message, it is probably due to improper XHTML in the edits
(or new content) that you made.  To see a more verbose parser message, run:
<blockquote>
<pre>
java org.apache.xalan.xslt.Process -in docs/MyFile.xml -out build/html/MyFile.html \
                                   -xsl config/documentation-stylesheet.xml -edump
</pre>
</blockquote>
The last &quot;<code>-edump</code>&quot; causes the parser to spit out
a more verbose error message.
</p>
<p>
The next step is to &quot;check in&quot; your new content to the CVS 
repository.  This ensures that the changes will never be lost.  Don&apos;t
worry, there is a way to &quot;undo&quot; your changes if you make a mistake).
All of the steps below assume that your current working directory is the
&quot;<code>bolouri</code>&quot; directory that was created when you 
executed your &quot;<code>cvs co</code>&quot; command above. 
</p>
<p>
If you are attempting to add a new web page &quot;<code>MyFile.html</code>&quot;
to the web pages (as described above), run the following commands:
<blockquote>
<pre>
cvs add docs/MyFile.xml
cvs commit -m 'my new xml file' docs/MyFile.xml
</pre>
</blockquote>
Substitute your specific filename for the &quot;<code>MyFile</code>&quot;
above.
If instead you are editing (or adding content to) an existing file
(for instance, the &quot;Resources page&quot; file <code>Resources.xml</code>), run the
following command:
<blockquote>
<pre>
cvs commit -m 'description of my edits' docs/Resources.xml
</pre>
</blockquote>
In both the above cases, the text in between the single quotes is a 
&quot;CVS log message&quot; that you should use to briefly describe 
what you changed. A single sentence usually suffices for the CVS log 
message.
</p>
<p>
Once you have &quot;committed&quot; your changes to the CVS archive, 
you can then build the web site and &quot;upload&quot; it to the 
web server.  This is accomplished by executing the following commands:
<blockquote>
<pre>
ant buildHTML
ant uploadWeb
</pre>
</blockquote>
At this point, you should be able to point your web browser to
your new web page at (for example):
<blockquote>
<pre>
&webBaseURL;/MyFile.xml
</pre>
</blockquote>
or the modified group home page at:
<blockquote>
<pre>
&webBaseURL;
</pre>
</blockquote>
If you have any questions about this process, please contact the
web site maintainer at: <code>&mainGroupEmailSafe;</code>.
</p>
<p>
The above instructions describe how to publish a web page
that will be externally (publically) visible.  To publish
a new web page that is only accessible within the 
&mainAffiliation;, follow the directions in this section.
Note that there is as yet no mechanism for publishing
web content that is only visible to the &mainGroup;;
for that purpose, you should use the group&apos;s shared
network drive.  
</p>
<p>
To publish a web page that is visible only within the 
&mainAffiliation;, create your new web page within the
<blockquote>
<pre>
bolouri/docs/private
</pre>
</blockquote>
directory of your CVS enlistment.  
Be sure to use a web page <em>within</em>
that directory as your template, because the 
funny-looking &quot;DOCTYPE&quot; statement at the
top of the file is different for files in the
&quot;<code>bolouri/docs/private</code>&quot;
subdirectory than it is for files in the
&quot;<code>bolouri/docs</code>&quot; subdirectory.
</p>
</isb:docsection>

<isb:docsection name="Generating PDF" label="generatingpdf">
<p>
If you wish to be able to build PDF documentation in an automated
fashion through the Ant build system, you will need to
have several additional software installed on your computer:
<ol>
<li><b>html2ps</b><br />
In order to be able to convert HTML documentation to PostScript format
(which is a necessary step in order to convert it to PDF format), you 
will need to have the <code>html2ps</code> program installed on your computer.
This simple program is availble from the 
<a href="http://www.tdb.uu.se/~jan/html2ps.html">HTML2PS Home Page</a>.
</li>
<li><b>htmltidy</b><br />
In order to work around bugs in the <code>html2ps</code> program, it
is necessary to &quot;tidy&quot; the XHTML output from the Xalan XSL
translator, before converting the XHTML to PostScript.  This requires
the use of the &quot;htmltidy&quot; program, available at
<a href="http://tidy.sourceforge.net">the htmltidy home page</a>.  The
executable program installed by this software package is called 
&quot;<code>tidy</code>&quot;.
</li>
<li><b>ps2pdf</b><br />
The <code>ps2pdf</code> program is used to convert PostScript files to
PDF format.  This program should already be installed on your
computer, if you have a modern desktop Linux distribution. 
</li>
<li><b>pdfdoclet</b><br />
The <code>pdfdoclet</code> program is used to generate Javadoc documentation
in PDF format.  This program is available from
<a href="http://pdfdoclet.sourceforge.net"><code>pdfdoclet.sourceforget.net</code></a>.
This program must be installed and the three libraries that ship with it
must be in your <code>CLASSPATH</code>:
<blockquote>
<pre>
pdfdoclet.jar
itext.jar
jakarta-regexp.jar
</pre>
</blockquote>
Make sure that the Ant program is capable
</li>
</ol>
The above three items are needed <em>only</em> if you are going to
(re-)generate PDF documentation from the original XML/Javadoc sources.
You will need to make sure that your <code>PATH</code> environment
variable is updated so that the <code>html2ps</code> and <code>tidy</code>
programs appear in your command path.  This means that when you type, for example,
<blockquote>
<pre>
tidy -help
</pre>
</blockquote>
at the shell prompt, you see the usage information for the <code>tidy</code>
program:
<blockquote>
<pre>
tidy [option...] [file...] [option...] [file...]
Utility to clean up and pretty print HTML/XHTML/XML
see http://tidy.sourceforge.net/
...
</pre>
</blockquote>
And similarly for <code>html2ps</code>, you should be able to enter
at the command prompt:
<blockquote>
<pre>
html2ps -help
</pre>
</blockquote>
and you should see the following result:
<blockquote>
<pre>
unknown option: -help
Usage:
 html2ps [-2cdDFghHLnORtTuUv] [-b URL] [-C string] [-e encoding]
  [-f file[:file[:...]]] [-i num] [-k file] [-l lang] [-m num] [-N num]
  [-o file] [-r path] [-s num] [-S string] [-W string] [-x num]
  [file|URL [file|URL [...]]]
</pre>
</blockquote>
The above steps will ensure that the Ant build system is able to find
the required external programs <code>html2ps</code> and <code>tiny</code>
that are needed in order to generate documentation in PDF format.
</p>
<p>
All of the PDF documentation for the &mainGroup; software
is (so far) generated from XML sources and from Javadoc
comments in Java source code.  
To re-generate PDF documentation from the XML and javadoc
sources, you would first check in your changes to the source
files, and then do:
<blockquote>
<pre>
ant buildHTML
ant buildPDF
ant uploadWeb
</pre>
</blockquote>
The last command uploads the web content to the FTP server.
Note that the &quot;<code>pdfdoclet</code>&quot; software product 
(used to generate a PDF version of Javadoc API documentation) is
still quite experimental, and its support for fancy HTML constructs
in Javadoc comments is rather shaky.
</p>
<p>
If you wish to generate PDF documentation &quot;by hand&quot; from
a HTML document, you can chain together the following tools in order
to accomplish the task.  Assuming that your HTML document is named
&quot;<code>myDoc.html</code>&quot;, the following steps should convert
the document into &quot;<code>myDoc.pdf</code>&quot;:
<blockquote>
<pre>
tidy myDoc.html &gt; myDoc-tidy.html
html2ps myDoc-tidy.html &gt; myDoc.ps
ps2pdf myDoc.ps myDoc.pdf
</pre>
</blockquote>
Note that <code>tidy</code> always spits out a lot of warning
messages, unless you use the <code>-quiet</code> directive.
If your document &quot;<code>myDoc.html</code>&quot; is strict
XHTML rather than ordinary HTML, the <code>tidy</code> command
would be a bit different:
<blockquote>
<pre>
tidy -xml -asxhtml myDoc.xhtml &gt; myDoc.xhtml
</pre>
</blockquote>
The reason why <code>tidy</code> is necessary is because the
<code>html2ps</code> program is very sensitive to correct input
formatting.  
</p>
</isb:docsection>

<isb:docsection name="Model Repository" label="repository">
<p>
The &mainGroup; model repository directory is used to archive 
biomolecular or mathematical models that have been 
found to be useful in our research, and that 
are believed to be of sufficient utility and validity 
to warrant making them available to the general public.
Any model definition file placed in this directory will
be publically visible on our external web server.
</p>
<p>
To &quot;publish&quot; a model definition file
&quot;myModel.txt&quot; in this repository, 
the following steps should be used:
<ol>
<li>copy the file &quot;myModel.txt&quot; to
the directory
<blockquote>
<pre>
BOLOURI_GROUP_WEB_PAGES/models/myModel.txt
</pre>
</blockquote>
(where the prefix before BOLOURI_GROUP_WEB_PAGES
is defined in the <a href="#main">main web pages section</a>
above.  
</li>
<li>edit the file
<blockquote>
<pre>
BOLOURI_GROUP_WEB_PAGES/models/index.html
</pre>
</blockquote>
to add a hyperlink to your new model definition file.
You may use any HTML editor you like, to do this.
The &quot;address&quot; used in the hyperlink should be:
<blockquote>
<pre>
&baseURL;/models/myModel.txt
</pre>
</blockquote>
</li>
<li>run the &quot;<code>updateWeb</code>&quot; script
(see instructions in the <a href="#main">main web pages
section</a> above) in order to publish it to the web server.
</li>
</ol>
</p>
</isb:docsection>

<isb:docsection name="Personal Home Pages" label="pershomepages">
<p>
This section presents specific instructions to publish 
your personal web page on the lab intranet.  To begin, 
simply write (or export) the web page as a HTML document.
For your personal home page might be <code>joe.html</code>.
Save the web page in the web content directory described in
the <a href="#main">main web pages section</a> above.
Then follow the directions in that section above, to publish
your web page on the web server.  Your web page (assuming
the file name is <code>joe.html</code>) will be
available at the URL:
<blockquote>
<pre>
&baseURL;/joe.html
</pre>
</blockquote>
</p>
<p>
You can then e-mail IT Services (<code>&mainHelpEmailSafe;</code>) \
and ask them to add a hyperlink to your personal home page, on the external-facing
Bolouri Group home page.
</p>

</isb:docsection>

<isb:docsection name="Direct Method to Publish New Pages" label="simpler">
<p>
If you wish to rapidly publish a <b>new</b> web page, and the above
instructions are too burdensome, there is a more direct method
to publish a new web page, and bypass CVS and the aforementioned
&quot;stylesheet&quot; framework.  You may use one of the two
&quot;repositories&quot; established for unmanaged web content,
which is web content that is not auto-generated using the methods 
described in the above sections of this document.  These two
repositories are just subdirectories on the FTP server.  
To use the simple web publishing method, write a HTML document
using your favorite HTML editor, and FTP the document to either 
the &quot;<code>privateRepository</code>&quot; or the
&quot;<code>publicRepository</code>&quot; directory on the 
following FTP server:
<blockquote>
<pre>
labs.systemsbiology.net
</pre>
</blockquote>
The two directories differ in that the public directory
is intended for web content that is visible to the outside,
and the private directory is intended for web content that
is visible only to the &mainAffiliation;
You should log into the FTP server using username
&quot;<code>bolouri_group</code>&quot;.  The password
can be obtained by asking one of the permanent staff
in the &mainGroup;.  Once your FTP connection is established,
you select the aforementioned directory using the 
&quot;<code>cd</code>&quot; command:
<ol>
<li>If you do want the document
to be accessible from outside, do the following:
<blockquote>
<pre>
cd publicRepository
</pre>
</blockquote> 
</li>
<li>If you do <em>not</em> want the
document to be accessible from outside, do the following:
<blockquote>
<pre>
cd privateRepository
</pre>
</blockquote>
</li>
</ol>
You can then upload your document (&quot;<code>YourDocument.html</code>)
using the &quot;<code>put</code>&quot; command:
<blockquote>
<pre>
put YourDocument.html
</pre>
</blockquote>
At this point, your document should be visible on the
external web server, at one of the two following URLs:
<blockquote>
<pre>
&baseURL;/privateRepository/YourDocument.html
&baseURL;/publicRepository/YourDocument.html
</pre>
</blockquote>
depending on whether you selected (1) or (2) above.
As emphasized above, files within the public repository
are visible to anyone on the Internet.  Files within
the private repository are only accessible to hosts
within the &mainAffiliation;.
</p>
<p>
<a name="warning" />
<blockquote>
<b>WARNING:</b> Please do not upload your web content 
directly into the default directory 
&quot;<code>bolouri_group</code>&quot; on the FTP server.  
Instead upload into either the
&quot;<code>publicRepository</code>&quot; or the
&quot;<code>privateRepository</code>&quot; directory,
as described above.  Most importantly, please be careful 
not to accidentally overwrite any of the web content that 
is already on the web server, when you are uploading your 
web content!
</blockquote>
</p>
<p>
Please note that most of the software packages mentioned
in this document are available in the &mainGroup; shared
directory, under the &quot;<code>software</code>&quot;
subdirectory.
</p>
</isb:docsection>


</isb:document>